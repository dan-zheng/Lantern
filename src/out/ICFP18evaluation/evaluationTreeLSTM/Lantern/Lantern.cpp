
      #include <fcntl.h>
      #include <errno.h>
      #include <err.h>
      #include <sys/mman.h>
      #include <sys/stat.h>
      #include <sys/time.h>
      #include <stdio.h>
      #include <stdint.h>
      #include <unistd.h>
      #include <time.h>
      #include <functional>
      #include <memory>
      #include <math.h>
      #include <random>

      using namespace std;
      #ifndef MAP_FILE
      #define MAP_FILE MAP_SHARED
      #endif
      int fsize(int fd) {
        struct stat stat;
        int res = fstat(fd,&stat);
        return stat.st_size;
      }
      int printll(char* s) {
        while (*s != '\n' && *s != ',' && *s != '\t') {
          putchar(*s++);
        }
        return 0;
      }
      long hash(char *str0, int len)
      {
        unsigned char* str = (unsigned char*)str0;
        unsigned long hash = 5381;
        int c;

        while ((c = *str++) && len--)
          hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

        return hash;
      }
      int HEAP_SIZE = 1073741826; // 1048576;  //2147483652; //536870912; // 268435456; //2097152;
      void *mallocBase = malloc(HEAP_SIZE);
      void *mallocAddr = mallocBase;
      void *waterMark  = mallocBase;
      void* myMalloc(size_t bytes) {
        void* res = mallocAddr;
        mallocAddr = (void *)((char *)mallocAddr + bytes);
        return res;
      }

      int timeval_subtract(struct timeval *result, struct timeval *t2, struct timeval *t1) {
        long int diff = (t2->tv_usec + 1000000 * t2->tv_sec) - (t1->tv_usec + 1000000 * t1->tv_sec);
        result->tv_sec = diff / 1000000;
        result->tv_usec = diff % 1000000;
        return (diff<0);
      }



      void Snippet(char*);

      std::random_device rd{};
      std::mt19937 gen{rd()};
      std::normal_distribution<> d{0,1};

      int main(int argc, char *argv[])
      {

        if (argc != 2) {
          printf("usage: query <filename>\n");
          return 0;
        }
        Snippet(argv[1]);
        return 0;
      }

      
/*****************************************
  Emitting C Generated Code                  
*******************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
void Snippet(char*  x0) {
double x1 = ((double)clock() / CLOCKS_PER_SEC);
int32_t* x2 = (int32_t*)myMalloc(1 * sizeof(int32_t));
int64_t x3 = (long)fopen("small_glove.txt", "r");
if (fscanf((FILE *)x3,"%d", &x2[0])!=1) perror("Error reading file");
int32_t x5 = x2[0];
float** x6 = (float**)myMalloc(x5 * sizeof(float*));
for(int x8=0; x8 < x5; x8++) {
float* x9 = (float*)myMalloc(300 * sizeof(float));
x6[x8] = x9;
for(int x12=0; x12 < 300; x12++) {
float* x13 = x6[x8];
if (fscanf((FILE *)x3,"%f", &x13[x12])!=1) perror("Error reading file");

}

}
fclose((FILE*)x3);
int32_t* x20 = (int32_t*)myMalloc(1 * sizeof(int32_t));
int64_t x21 = (long)fopen("array_tree.txt", "r");
if (fscanf((FILE *)x21,"%d", &x20[0])!=1) perror("Error reading file");
int32_t x23 = x20[0];
int32_t x24 = x23 * 4;
int** x25 = (int**)myMalloc(x24 * sizeof(int*));
int32_t* x26 = (int32_t*)myMalloc(1 * sizeof(int32_t));
for(int x28=0; x28 < x23; x28++) {
if (fscanf((FILE *)x21,"%d", &x26[0])!=1) perror("Error reading file");
int32_t x32 = x28 * 4;
for(int x31=0; x31 < 4; x31++) {
int32_t x34 = x26[0];
int32_t* x35 = (int32_t*)myMalloc(x34 * sizeof(int32_t));
int32_t x33 = x32 + x31;
x25[x33] = x35;
int32_t x37 = x26[0];
for(int x39=0; x39 < x37; x39++) {
int* x40 = x25[x33];
if (fscanf((FILE *)x21,"%d", &x40[x39])!=1) perror("Error reading file");

}

}

}
fclose((FILE*)x21);
float* x49 = (float*)myMalloc(45000 * sizeof(float));
for(int x51=0; x51 < 45000; x51++) {
float x52 = (float)rand()/RAND_MAX;
float x53 = x52 - 0.5f;
float x54 = x53 * 0.01f;
x49[x51] = x54;

}
float* x58 = (float*)myMalloc(150 * sizeof(float));
for(int x60=0; x60 < 150; x60++) {
x58[x60] = 0.0f;

}
float* x64 = (float*)myMalloc(45000 * sizeof(float));
for(int x65=0; x65 < 45000; x65++) {
float x66 = (float)rand()/RAND_MAX;
float x67 = x66 - 0.5f;
float x68 = x67 * 0.01f;
x64[x65] = x68;

}
float* x72 = (float*)myMalloc(150 * sizeof(float));
for(int x73=0; x73 < 150; x73++) {
x72[x73] = 0.0f;

}
float* x77 = (float*)myMalloc(45000 * sizeof(float));
for(int x78=0; x78 < 45000; x78++) {
float x79 = (float)rand()/RAND_MAX;
float x80 = x79 - 0.5f;
float x81 = x80 * 0.01f;
x77[x78] = x81;

}
float* x85 = (float*)myMalloc(150 * sizeof(float));
for(int x86=0; x86 < 150; x86++) {
x85[x86] = 0.0f;

}
float* x90 = (float*)myMalloc(22500 * sizeof(float));
for(int x92=0; x92 < 22500; x92++) {
float x93 = (float)rand()/RAND_MAX;
float x94 = x93 - 0.5f;
float x95 = x94 * 0.01f;
x90[x92] = x95;

}
float* x99 = (float*)myMalloc(22500 * sizeof(float));
for(int x100=0; x100 < 22500; x100++) {
float x101 = (float)rand()/RAND_MAX;
float x102 = x101 - 0.5f;
float x103 = x102 * 0.01f;
x99[x100] = x103;

}
float* x107 = (float*)myMalloc(150 * sizeof(float));
for(int x108=0; x108 < 150; x108++) {
x107[x108] = 0.0f;

}
float* x112 = (float*)myMalloc(22500 * sizeof(float));
for(int x113=0; x113 < 22500; x113++) {
float x114 = (float)rand()/RAND_MAX;
float x115 = x114 - 0.5f;
float x116 = x115 * 0.01f;
x112[x113] = x116;

}
float* x120 = (float*)myMalloc(22500 * sizeof(float));
for(int x121=0; x121 < 22500; x121++) {
float x122 = (float)rand()/RAND_MAX;
float x123 = x122 - 0.5f;
float x124 = x123 * 0.01f;
x120[x121] = x124;

}
float* x128 = (float*)myMalloc(22500 * sizeof(float));
for(int x129=0; x129 < 22500; x129++) {
float x130 = (float)rand()/RAND_MAX;
float x131 = x130 - 0.5f;
float x132 = x131 * 0.01f;
x128[x129] = x132;

}
float* x136 = (float*)myMalloc(22500 * sizeof(float));
for(int x137=0; x137 < 22500; x137++) {
float x138 = (float)rand()/RAND_MAX;
float x139 = x138 - 0.5f;
float x140 = x139 * 0.01f;
x136[x137] = x140;

}
float* x144 = (float*)myMalloc(150 * sizeof(float));
for(int x145=0; x145 < 150; x145++) {
x144[x145] = 0.0f;

}
float* x149 = (float*)myMalloc(22500 * sizeof(float));
for(int x150=0; x150 < 22500; x150++) {
float x151 = (float)rand()/RAND_MAX;
float x152 = x151 - 0.5f;
float x153 = x152 * 0.01f;
x149[x150] = x153;

}
float* x157 = (float*)myMalloc(22500 * sizeof(float));
for(int x158=0; x158 < 22500; x158++) {
float x159 = (float)rand()/RAND_MAX;
float x160 = x159 - 0.5f;
float x161 = x160 * 0.01f;
x157[x158] = x161;

}
float* x165 = (float*)myMalloc(150 * sizeof(float));
for(int x166=0; x166 < 150; x166++) {
x165[x166] = 0.0f;

}
float* x170 = (float*)myMalloc(22500 * sizeof(float));
for(int x171=0; x171 < 22500; x171++) {
float x172 = (float)rand()/RAND_MAX;
float x173 = x172 - 0.5f;
float x174 = x173 * 0.01f;
x170[x171] = x174;

}
float* x178 = (float*)myMalloc(22500 * sizeof(float));
for(int x179=0; x179 < 22500; x179++) {
float x180 = (float)rand()/RAND_MAX;
float x181 = x180 - 0.5f;
float x182 = x181 * 0.01f;
x178[x179] = x182;

}
float* x186 = (float*)myMalloc(150 * sizeof(float));
for(int x187=0; x187 < 150; x187++) {
x186[x187] = 0.0f;

}
float* x191 = (float*)myMalloc(750 * sizeof(float));
for(int x193=0; x193 < 750; x193++) {
float x194 = (float)rand()/RAND_MAX;
float x195 = x194 - 0.5f;
float x196 = x195 * 0.01f;
x191[x193] = x196;

}
float* x200 = (float*)myMalloc(5 * sizeof(float));
for(int x202=0; x202 < 5; x202++) {
x200[x202] = 0.0f;

}
float* x206 = (float*)myMalloc(45000 * sizeof(float));
for(int x207=0; x207 < 45000; x207++) {
x206[x207] = 0.0f;

}
float* x211 = (float*)myMalloc(150 * sizeof(float));
for(int x212=0; x212 < 150; x212++) {
x211[x212] = 0.0f;

}
float* x216 = (float*)myMalloc(45000 * sizeof(float));
for(int x217=0; x217 < 45000; x217++) {
x216[x217] = 0.0f;

}
float* x221 = (float*)myMalloc(150 * sizeof(float));
for(int x222=0; x222 < 150; x222++) {
x221[x222] = 0.0f;

}
float* x226 = (float*)myMalloc(45000 * sizeof(float));
for(int x227=0; x227 < 45000; x227++) {
x226[x227] = 0.0f;

}
float* x231 = (float*)myMalloc(150 * sizeof(float));
for(int x232=0; x232 < 150; x232++) {
x231[x232] = 0.0f;

}
float* x236 = (float*)myMalloc(22500 * sizeof(float));
for(int x237=0; x237 < 22500; x237++) {
x236[x237] = 0.0f;

}
float* x241 = (float*)myMalloc(22500 * sizeof(float));
for(int x242=0; x242 < 22500; x242++) {
x241[x242] = 0.0f;

}
float* x246 = (float*)myMalloc(150 * sizeof(float));
for(int x247=0; x247 < 150; x247++) {
x246[x247] = 0.0f;

}
float* x251 = (float*)myMalloc(22500 * sizeof(float));
for(int x252=0; x252 < 22500; x252++) {
x251[x252] = 0.0f;

}
float* x256 = (float*)myMalloc(22500 * sizeof(float));
for(int x257=0; x257 < 22500; x257++) {
x256[x257] = 0.0f;

}
float* x261 = (float*)myMalloc(22500 * sizeof(float));
for(int x262=0; x262 < 22500; x262++) {
x261[x262] = 0.0f;

}
float* x266 = (float*)myMalloc(22500 * sizeof(float));
for(int x267=0; x267 < 22500; x267++) {
x266[x267] = 0.0f;

}
float* x271 = (float*)myMalloc(150 * sizeof(float));
for(int x272=0; x272 < 150; x272++) {
x271[x272] = 0.0f;

}
float* x276 = (float*)myMalloc(22500 * sizeof(float));
for(int x277=0; x277 < 22500; x277++) {
x276[x277] = 0.0f;

}
float* x281 = (float*)myMalloc(22500 * sizeof(float));
for(int x282=0; x282 < 22500; x282++) {
x281[x282] = 0.0f;

}
float* x286 = (float*)myMalloc(150 * sizeof(float));
for(int x287=0; x287 < 150; x287++) {
x286[x287] = 0.0f;

}
float* x291 = (float*)myMalloc(22500 * sizeof(float));
for(int x292=0; x292 < 22500; x292++) {
x291[x292] = 0.0f;

}
float* x296 = (float*)myMalloc(22500 * sizeof(float));
for(int x297=0; x297 < 22500; x297++) {
x296[x297] = 0.0f;

}
float* x301 = (float*)myMalloc(150 * sizeof(float));
for(int x302=0; x302 < 150; x302++) {
x301[x302] = 0.0f;

}
float* x306 = (float*)myMalloc(750 * sizeof(float));
for(int x307=0; x307 < 750; x307++) {
x306[x307] = 0.0f;

}
float* x311 = (float*)myMalloc(5 * sizeof(float));
for(int x312=0; x312 < 5; x312++) {
x311[x312] = 0.0f;

}
float* x316 = (float*)myMalloc(300 * sizeof(float));
for(int x317=0; x317 < 300; x317++) {
x316[x317] = 0.0f;

}
float* x321 = (float*)myMalloc(300 * sizeof(float));
for(int x322=0; x322 < 300; x322++) {
x321[x322] = 0.0f;

}
float* x326 = (float*)myMalloc(150 * sizeof(float));
for(int x327=0; x327 < 150; x327++) {
x326[x327] = 0.0f;

}
float* x331 = (float*)myMalloc(150 * sizeof(float));
for(int x332=0; x332 < 150; x332++) {
x331[x332] = 0.0f;

}
float* x336 = (float*)myMalloc(45000 * sizeof(float));
for(int x337=0; x337 < 45000; x337++) {
x336[x337] = 0.0f;

}
float* x341 = (float*)myMalloc(150 * sizeof(float));
for(int x342=0; x342 < 150; x342++) {
x341[x342] = 0.0f;

}
float* x346 = (float*)myMalloc(45000 * sizeof(float));
for(int x347=0; x347 < 45000; x347++) {
x346[x347] = 0.0f;

}
float* x351 = (float*)myMalloc(150 * sizeof(float));
for(int x352=0; x352 < 150; x352++) {
x351[x352] = 0.0f;

}
float* x356 = (float*)myMalloc(45000 * sizeof(float));
for(int x357=0; x357 < 45000; x357++) {
x356[x357] = 0.0f;

}
float* x361 = (float*)myMalloc(150 * sizeof(float));
for(int x362=0; x362 < 150; x362++) {
x361[x362] = 0.0f;

}
float* x366 = (float*)myMalloc(22500 * sizeof(float));
for(int x367=0; x367 < 22500; x367++) {
x366[x367] = 0.0f;

}
float* x371 = (float*)myMalloc(22500 * sizeof(float));
for(int x372=0; x372 < 22500; x372++) {
x371[x372] = 0.0f;

}
float* x376 = (float*)myMalloc(150 * sizeof(float));
for(int x377=0; x377 < 150; x377++) {
x376[x377] = 0.0f;

}
float* x381 = (float*)myMalloc(22500 * sizeof(float));
for(int x382=0; x382 < 22500; x382++) {
x381[x382] = 0.0f;

}
float* x386 = (float*)myMalloc(22500 * sizeof(float));
for(int x387=0; x387 < 22500; x387++) {
x386[x387] = 0.0f;

}
float* x391 = (float*)myMalloc(22500 * sizeof(float));
for(int x392=0; x392 < 22500; x392++) {
x391[x392] = 0.0f;

}
float* x396 = (float*)myMalloc(22500 * sizeof(float));
for(int x397=0; x397 < 22500; x397++) {
x396[x397] = 0.0f;

}
float* x401 = (float*)myMalloc(150 * sizeof(float));
for(int x402=0; x402 < 150; x402++) {
x401[x402] = 0.0f;

}
float* x406 = (float*)myMalloc(22500 * sizeof(float));
for(int x407=0; x407 < 22500; x407++) {
x406[x407] = 0.0f;

}
float* x411 = (float*)myMalloc(22500 * sizeof(float));
for(int x412=0; x412 < 22500; x412++) {
x411[x412] = 0.0f;

}
float* x416 = (float*)myMalloc(150 * sizeof(float));
for(int x417=0; x417 < 150; x417++) {
x416[x417] = 0.0f;

}
float* x421 = (float*)myMalloc(22500 * sizeof(float));
for(int x422=0; x422 < 22500; x422++) {
x421[x422] = 0.0f;

}
float* x426 = (float*)myMalloc(22500 * sizeof(float));
for(int x427=0; x427 < 22500; x427++) {
x426[x427] = 0.0f;

}
float* x431 = (float*)myMalloc(150 * sizeof(float));
for(int x432=0; x432 < 150; x432++) {
x431[x432] = 0.0f;

}
float* x436 = (float*)myMalloc(750 * sizeof(float));
for(int x437=0; x437 < 750; x437++) {
x436[x437] = 0.0f;

}
float* x441 = (float*)myMalloc(5 * sizeof(float));
for(int x442=0; x442 < 5; x442++) {
x441[x442] = 0.0f;

}
double* x446 = (double*)myMalloc(30 * sizeof(double));
int64_t x447 = (long)mallocAddr;
double x448 = ((double)clock() / CLOCKS_PER_SEC);
for(int x450=0; x450 < 30; x450++) {
float x451 = 0.0f;
for(int x452=0; x452 < x23; x452++) {
int32_t x453 = x452 % x23;
int32_t x454 = x453 * 4;
int* x455 = x25[x454];
int32_t x456 = x454 + 1;
int* x457 = x25[x456];
int32_t x458 = x454 + 2;
int* x459 = x25[x458];
int32_t x460 = x454 + 3;
int* x461 = x25[x460];
function<void(int32_t,function<void(float**)>,float**)> x508 = [&](int32_t x509,function<void(float**)> x510,float** x511) {
float** x514 = x511;
float* x515 = x514[0];
float* x516 = x514[1];
float* x517 = x514[2];
float* x518 = x514[3];
float* x519 = x514[4];
float* x520 = x514[5];
int32_t x512 = x509;
bool x521 = x512 >= 0;
if (x521) {
int32_t x522 = x459[x512];
float** x2516 = (float**)myMalloc(6 * sizeof(float*));
x2516[0] = x515;
x2516[1] = x516;
x2516[2] = x517;
x2516[3] = x518;
x2516[4] = x519;
x2516[5] = x520;
function<void(float**)> x513 = x510;
function<void(float**)> x523 = [&](float** x524) {
float* x525 = x524[0];
float* x526 = x524[1];
float* x527 = x524[2];
float* x528 = x524[3];
float* x529 = x524[4];
float* x530 = x524[5];
int32_t x531 = x461[x512];
float** x2506 = (float**)myMalloc(6 * sizeof(float*));
x2506[0] = x515;
x2506[1] = x516;
x2506[2] = x517;
x2506[3] = x518;
x2506[4] = x519;
x2506[5] = x520;
function<void(float**)> x532 = [&](float** x533) {
float* x534 = x533[0];
float* x535 = x533[1];
float* x536 = x533[2];
float* x537 = x533[3];
float* x538 = x533[4];
float* x539 = x533[5];
float* x540 = (float*)myMalloc(5 * sizeof(float));
for(int x541=0; x541 < 5; x541++) {
x540[x541] = 0.0f;

}
int32_t x545 = x455[x512];
x540[x545] = 1.0f;
float* x547 = (float*)myMalloc(5 * sizeof(float));
for(int x548=0; x548 < 5; x548++) {
x547[x548] = 0.0f;

}
int32_t x552 = x459[x512];
bool x553 = x552 < 0;
if (x553) {
int32_t x2487 = x457[x512];
float* x2488 = x6[x2487];
float* x2489 = (float*)myMalloc(300 * sizeof(float));
for(int x2490=0; x2490 < 300; x2490++) {
x2489[x2490] = 0.0f;

}
float** x2494 = (float**)myMalloc(2 * sizeof(float*));
x2494[0] = x2488;
x2494[1] = x2489;
function<void(float**)> x554 = [&](float** x555) {
float* x556 = x555[0];
float* x557 = x555[1];
int32_t x558 = x459[x512];
bool x559 = x558 < 0;
if (x559) {
// dot List(150, 300) - WrappedArray(300)
int32_t x2168 = 0;
float* x2169 = (float*)myMalloc(150 * sizeof(float));
for(int x2170=0; x2170 < 150; x2170++) {
float x2171 = 0.0f;
for(int x2172=0; x2172 < 300; x2172++) {
int32_t x2173 = x2168;
float x2174 = x49[x2173];
float x2175 = x556[x2172];
float x2176 = x2174 * x2175;
x2171 += x2176;
x2168 += 1;

}
float x2181 = x2171;
x2169[x2170] = x2181;

}
float* x2185 = (float*)myMalloc(150 * sizeof(float));
for(int x2186=0; x2186 < 150; x2186++) {
x2185[x2186] = 0.0f;

}
float* x2190 = (float*)myMalloc(150 * sizeof(float));
for(int x2191=0; x2191 < 150; x2191++) {
float x2192 = x2169[x2191];
float x2193 = x58[x2191];
float x2194 = x2192 + x2193;
x2190[x2191] = x2194;

}
float* x2198 = (float*)myMalloc(150 * sizeof(float));
for(int x2199=0; x2199 < 150; x2199++) {
x2198[x2199] = 0.0f;

}
float* x2203 = (float*)myMalloc(150 * sizeof(float));
for(int x2204=0; x2204 < 150; x2204++) {
float x2205 = x2190[x2204];
float x2206 = -1.0f * x2205;
double x2207 = (double)x2206;
double x2208 = exp(x2207);
float x2209 = (float)x2208;
float x2210 = x2209 + 1.0f;
float x2211 = 1.0f / x2210;
x2203[x2204] = x2211;

}
float* x2215 = (float*)myMalloc(150 * sizeof(float));
for(int x2216=0; x2216 < 150; x2216++) {
x2215[x2216] = 0.0f;

}
float** x2220 = (float**)myMalloc(2 * sizeof(float*));
x2220[0] = x2203;
x2220[1] = x2215;
function<void(float**)> x560 = [&](float** x561) {
float* x562 = x561[0];
float* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
float** x1959 = (float**)myMalloc(2 * sizeof(float*));
x1959[0] = x326;
x1959[1] = x331;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1751 = (float**)myMalloc(2 * sizeof(float*));
x1751[0] = x326;
x1751[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1751);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1757 = 0;
float* x1758 = (float*)myMalloc(150 * sizeof(float));
for(int x1759=0; x1759 < 150; x1759++) {
float x1760 = 0.0f;
for(int x1761=0; x1761 < 150; x1761++) {
int32_t x1762 = x1757;
float x1763 = x128[x1762];
float x1764 = x527[x1761];
float x1765 = x1763 * x1764;
x1760 += x1765;
x1757 += 1;

}
float x1770 = x1760;
x1758[x1759] = x1770;

}
float* x1774 = (float*)myMalloc(150 * sizeof(float));
for(int x1775=0; x1775 < 150; x1775++) {
x1774[x1775] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1780 = 0;
float* x1781 = (float*)myMalloc(150 * sizeof(float));
for(int x1782=0; x1782 < 150; x1782++) {
float x1783 = 0.0f;
for(int x1784=0; x1784 < 150; x1784++) {
int32_t x1785 = x1780;
float x1786 = x136[x1785];
float x1787 = x536[x1784];
float x1788 = x1786 * x1787;
x1783 += x1788;
x1780 += 1;

}
float x1793 = x1783;
x1781[x1782] = x1793;

}
float* x1797 = (float*)myMalloc(150 * sizeof(float));
for(int x1798=0; x1798 < 150; x1798++) {
x1797[x1798] = 0.0f;

}
float* x1802 = (float*)myMalloc(150 * sizeof(float));
for(int x1803=0; x1803 < 150; x1803++) {
float x1804 = x1758[x1803];
float x1805 = x1781[x1803];
float x1806 = x1804 + x1805;
x1802[x1803] = x1806;

}
float* x1810 = (float*)myMalloc(150 * sizeof(float));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0f;

}
float* x1815 = (float*)myMalloc(150 * sizeof(float));
for(int x1816=0; x1816 < 150; x1816++) {
float x1817 = x1802[x1816];
float x1818 = x144[x1816];
float x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
float* x1823 = (float*)myMalloc(150 * sizeof(float));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0f;

}
float* x1828 = (float*)myMalloc(150 * sizeof(float));
for(int x1829=0; x1829 < 150; x1829++) {
float x1830 = x1815[x1829];
float x1831 = -1.0f * x1830;
double x1832 = (double)x1831;
double x1833 = exp(x1832);
float x1834 = (float)x1833;
float x1835 = x1834 + 1.0f;
float x1836 = 1.0f / x1835;
x1828[x1829] = x1836;

}
float* x1840 = (float*)myMalloc(150 * sizeof(float));
for(int x1841=0; x1841 < 150; x1841++) {
x1840[x1841] = 0.0f;

}
float** x1845 = (float**)myMalloc(2 * sizeof(float*));
x1845[0] = x1828;
x1845[1] = x1840;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1845);
for(int x1849=0; x1849 < 150; x1849++) {
float x1850 = x1823[x1849];
float x1851 = x1828[x1849];
float x1854 = x1840[x1849];
float x1852 = 1.0f - x1851;
float x1853 = x1852 * x1851;
float x1855 = x1853 * x1854;
float x1856 = x1850 + x1855;
x1823[x1849] = x1856;

}
// backpropagate +
for(int x1861=0; x1861 < 150; x1861++) {
float x1862 = x1810[x1861];
float x1863 = x1823[x1861];
float x1864 = x1862 + x1863;
x1810[x1861] = x1864;

}
for(int x1868=0; x1868 < 150; x1868++) {
float x1869 = x271[x1868];
float x1870 = x1823[x1868];
float x1871 = x1869 + x1870;
x271[x1868] = x1871;

}
// backpropagate +
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1774[x1876];
float x1878 = x1810[x1876];
float x1879 = x1877 + x1878;
x1774[x1876] = x1879;

}
for(int x1883=0; x1883 < 150; x1883++) {
float x1884 = x1797[x1883];
float x1885 = x1810[x1883];
float x1886 = x1884 + x1885;
x1797[x1883] = x1886;

}
// add_cartesian
int32_t x1891 = 0;
for(int x1892=0; x1892 < 150; x1892++) {
for(int x1893=0; x1893 < 150; x1893++) {
int32_t x1894 = x1891;
int32_t x1895 = x1894 + x1893;
float x1896 = x266[x1895];
float x1897 = x536[x1893];
float x1898 = x1797[x1892];
float x1899 = x1897 * x1898;
float x1900 = x1896 + x1899;
x266[x1895] = x1900;

}
x1891 += 150;

}
int32_t x1907 = 0;
for(int x1908=0; x1908 < 150; x1908++) {
for(int x1909=0; x1909 < 150; x1909++) {
float x1910 = x537[x1909];
int32_t x1911 = x1907;
int32_t x1912 = x1911 + x1909;
float x1913 = x136[x1912];
float x1914 = x1797[x1908];
float x1915 = x1913 * x1914;
float x1916 = x1910 + x1915;
x537[x1909] = x1916;

}
x1907 += 150;

}
// add_cartesian
int32_t x1924 = 0;
for(int x1925=0; x1925 < 150; x1925++) {
for(int x1926=0; x1926 < 150; x1926++) {
int32_t x1927 = x1924;
int32_t x1928 = x1927 + x1926;
float x1929 = x261[x1928];
float x1930 = x527[x1926];
float x1931 = x1774[x1925];
float x1932 = x1930 * x1931;
float x1933 = x1929 + x1932;
x261[x1928] = x1933;

}
x1924 += 150;

}
int32_t x1940 = 0;
for(int x1941=0; x1941 < 150; x1941++) {
for(int x1942=0; x1942 < 150; x1942++) {
float x1943 = x528[x1942];
int32_t x1944 = x1940;
int32_t x1945 = x1944 + x1942;
float x1946 = x128[x1945];
float x1947 = x1774[x1941];
float x1948 = x1946 * x1947;
float x1949 = x1943 + x1948;
x528[x1942] = x1949;

}
x1940 += 150;

}
}
};
x566(x1959);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1965 = 0;
float* x1966 = (float*)myMalloc(150 * sizeof(float));
for(int x1967=0; x1967 < 150; x1967++) {
float x1968 = 0.0f;
for(int x1969=0; x1969 < 150; x1969++) {
int32_t x1970 = x1965;
float x1971 = x112[x1970];
float x1972 = x527[x1969];
float x1973 = x1971 * x1972;
x1968 += x1973;
x1965 += 1;

}
float x1978 = x1968;
x1966[x1967] = x1978;

}
float* x1982 = (float*)myMalloc(150 * sizeof(float));
for(int x1983=0; x1983 < 150; x1983++) {
x1982[x1983] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1988 = 0;
float* x1989 = (float*)myMalloc(150 * sizeof(float));
for(int x1990=0; x1990 < 150; x1990++) {
float x1991 = 0.0f;
for(int x1992=0; x1992 < 150; x1992++) {
int32_t x1993 = x1988;
float x1994 = x120[x1993];
float x1995 = x536[x1992];
float x1996 = x1994 * x1995;
x1991 += x1996;
x1988 += 1;

}
float x2001 = x1991;
x1989[x1990] = x2001;

}
float* x2005 = (float*)myMalloc(150 * sizeof(float));
for(int x2006=0; x2006 < 150; x2006++) {
x2005[x2006] = 0.0f;

}
float* x2010 = (float*)myMalloc(150 * sizeof(float));
for(int x2011=0; x2011 < 150; x2011++) {
float x2012 = x1966[x2011];
float x2013 = x1989[x2011];
float x2014 = x2012 + x2013;
x2010[x2011] = x2014;

}
float* x2018 = (float*)myMalloc(150 * sizeof(float));
for(int x2019=0; x2019 < 150; x2019++) {
x2018[x2019] = 0.0f;

}
float* x2023 = (float*)myMalloc(150 * sizeof(float));
for(int x2024=0; x2024 < 150; x2024++) {
float x2025 = x2010[x2024];
float x2026 = x144[x2024];
float x2027 = x2025 + x2026;
x2023[x2024] = x2027;

}
float* x2031 = (float*)myMalloc(150 * sizeof(float));
for(int x2032=0; x2032 < 150; x2032++) {
x2031[x2032] = 0.0f;

}
float* x2036 = (float*)myMalloc(150 * sizeof(float));
for(int x2037=0; x2037 < 150; x2037++) {
float x2038 = x2023[x2037];
float x2039 = -1.0f * x2038;
double x2040 = (double)x2039;
double x2041 = exp(x2040);
float x2042 = (float)x2041;
float x2043 = x2042 + 1.0f;
float x2044 = 1.0f / x2043;
x2036[x2037] = x2044;

}
float* x2048 = (float*)myMalloc(150 * sizeof(float));
for(int x2049=0; x2049 < 150; x2049++) {
x2048[x2049] = 0.0f;

}
float** x2053 = (float**)myMalloc(2 * sizeof(float*));
x2053[0] = x2036;
x2053[1] = x2048;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1751 = (float**)myMalloc(2 * sizeof(float*));
x1751[0] = x326;
x1751[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1751);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1757 = 0;
float* x1758 = (float*)myMalloc(150 * sizeof(float));
for(int x1759=0; x1759 < 150; x1759++) {
float x1760 = 0.0f;
for(int x1761=0; x1761 < 150; x1761++) {
int32_t x1762 = x1757;
float x1763 = x128[x1762];
float x1764 = x527[x1761];
float x1765 = x1763 * x1764;
x1760 += x1765;
x1757 += 1;

}
float x1770 = x1760;
x1758[x1759] = x1770;

}
float* x1774 = (float*)myMalloc(150 * sizeof(float));
for(int x1775=0; x1775 < 150; x1775++) {
x1774[x1775] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1780 = 0;
float* x1781 = (float*)myMalloc(150 * sizeof(float));
for(int x1782=0; x1782 < 150; x1782++) {
float x1783 = 0.0f;
for(int x1784=0; x1784 < 150; x1784++) {
int32_t x1785 = x1780;
float x1786 = x136[x1785];
float x1787 = x536[x1784];
float x1788 = x1786 * x1787;
x1783 += x1788;
x1780 += 1;

}
float x1793 = x1783;
x1781[x1782] = x1793;

}
float* x1797 = (float*)myMalloc(150 * sizeof(float));
for(int x1798=0; x1798 < 150; x1798++) {
x1797[x1798] = 0.0f;

}
float* x1802 = (float*)myMalloc(150 * sizeof(float));
for(int x1803=0; x1803 < 150; x1803++) {
float x1804 = x1758[x1803];
float x1805 = x1781[x1803];
float x1806 = x1804 + x1805;
x1802[x1803] = x1806;

}
float* x1810 = (float*)myMalloc(150 * sizeof(float));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0f;

}
float* x1815 = (float*)myMalloc(150 * sizeof(float));
for(int x1816=0; x1816 < 150; x1816++) {
float x1817 = x1802[x1816];
float x1818 = x144[x1816];
float x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
float* x1823 = (float*)myMalloc(150 * sizeof(float));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0f;

}
float* x1828 = (float*)myMalloc(150 * sizeof(float));
for(int x1829=0; x1829 < 150; x1829++) {
float x1830 = x1815[x1829];
float x1831 = -1.0f * x1830;
double x1832 = (double)x1831;
double x1833 = exp(x1832);
float x1834 = (float)x1833;
float x1835 = x1834 + 1.0f;
float x1836 = 1.0f / x1835;
x1828[x1829] = x1836;

}
float* x1840 = (float*)myMalloc(150 * sizeof(float));
for(int x1841=0; x1841 < 150; x1841++) {
x1840[x1841] = 0.0f;

}
float** x1845 = (float**)myMalloc(2 * sizeof(float*));
x1845[0] = x1828;
x1845[1] = x1840;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1845);
for(int x1849=0; x1849 < 150; x1849++) {
float x1850 = x1823[x1849];
float x1851 = x1828[x1849];
float x1854 = x1840[x1849];
float x1852 = 1.0f - x1851;
float x1853 = x1852 * x1851;
float x1855 = x1853 * x1854;
float x1856 = x1850 + x1855;
x1823[x1849] = x1856;

}
// backpropagate +
for(int x1861=0; x1861 < 150; x1861++) {
float x1862 = x1810[x1861];
float x1863 = x1823[x1861];
float x1864 = x1862 + x1863;
x1810[x1861] = x1864;

}
for(int x1868=0; x1868 < 150; x1868++) {
float x1869 = x271[x1868];
float x1870 = x1823[x1868];
float x1871 = x1869 + x1870;
x271[x1868] = x1871;

}
// backpropagate +
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1774[x1876];
float x1878 = x1810[x1876];
float x1879 = x1877 + x1878;
x1774[x1876] = x1879;

}
for(int x1883=0; x1883 < 150; x1883++) {
float x1884 = x1797[x1883];
float x1885 = x1810[x1883];
float x1886 = x1884 + x1885;
x1797[x1883] = x1886;

}
// add_cartesian
int32_t x1891 = 0;
for(int x1892=0; x1892 < 150; x1892++) {
for(int x1893=0; x1893 < 150; x1893++) {
int32_t x1894 = x1891;
int32_t x1895 = x1894 + x1893;
float x1896 = x266[x1895];
float x1897 = x536[x1893];
float x1898 = x1797[x1892];
float x1899 = x1897 * x1898;
float x1900 = x1896 + x1899;
x266[x1895] = x1900;

}
x1891 += 150;

}
int32_t x1907 = 0;
for(int x1908=0; x1908 < 150; x1908++) {
for(int x1909=0; x1909 < 150; x1909++) {
float x1910 = x537[x1909];
int32_t x1911 = x1907;
int32_t x1912 = x1911 + x1909;
float x1913 = x136[x1912];
float x1914 = x1797[x1908];
float x1915 = x1913 * x1914;
float x1916 = x1910 + x1915;
x537[x1909] = x1916;

}
x1907 += 150;

}
// add_cartesian
int32_t x1924 = 0;
for(int x1925=0; x1925 < 150; x1925++) {
for(int x1926=0; x1926 < 150; x1926++) {
int32_t x1927 = x1924;
int32_t x1928 = x1927 + x1926;
float x1929 = x261[x1928];
float x1930 = x527[x1926];
float x1931 = x1774[x1925];
float x1932 = x1930 * x1931;
float x1933 = x1929 + x1932;
x261[x1928] = x1933;

}
x1924 += 150;

}
int32_t x1940 = 0;
for(int x1941=0; x1941 < 150; x1941++) {
for(int x1942=0; x1942 < 150; x1942++) {
float x1943 = x528[x1942];
int32_t x1944 = x1940;
int32_t x1945 = x1944 + x1942;
float x1946 = x128[x1945];
float x1947 = x1774[x1941];
float x1948 = x1946 * x1947;
float x1949 = x1943 + x1948;
x528[x1942] = x1949;

}
x1940 += 150;

}
}
};
x566(x2053);
for(int x2057=0; x2057 < 150; x2057++) {
float x2058 = x2031[x2057];
float x2059 = x2036[x2057];
float x2062 = x2048[x2057];
float x2060 = 1.0f - x2059;
float x2061 = x2060 * x2059;
float x2063 = x2061 * x2062;
float x2064 = x2058 + x2063;
x2031[x2057] = x2064;

}
// backpropagate +
for(int x2069=0; x2069 < 150; x2069++) {
float x2070 = x2018[x2069];
float x2071 = x2031[x2069];
float x2072 = x2070 + x2071;
x2018[x2069] = x2072;

}
for(int x2076=0; x2076 < 150; x2076++) {
float x2077 = x271[x2076];
float x2078 = x2031[x2076];
float x2079 = x2077 + x2078;
x271[x2076] = x2079;

}
// backpropagate +
for(int x2084=0; x2084 < 150; x2084++) {
float x2085 = x1982[x2084];
float x2086 = x2018[x2084];
float x2087 = x2085 + x2086;
x1982[x2084] = x2087;

}
for(int x2091=0; x2091 < 150; x2091++) {
float x2092 = x2005[x2091];
float x2093 = x2018[x2091];
float x2094 = x2092 + x2093;
x2005[x2091] = x2094;

}
// add_cartesian
int32_t x2099 = 0;
for(int x2100=0; x2100 < 150; x2100++) {
for(int x2101=0; x2101 < 150; x2101++) {
int32_t x2102 = x2099;
int32_t x2103 = x2102 + x2101;
float x2104 = x256[x2103];
float x2105 = x536[x2101];
float x2106 = x2005[x2100];
float x2107 = x2105 * x2106;
float x2108 = x2104 + x2107;
x256[x2103] = x2108;

}
x2099 += 150;

}
int32_t x2115 = 0;
for(int x2116=0; x2116 < 150; x2116++) {
for(int x2117=0; x2117 < 150; x2117++) {
float x2118 = x537[x2117];
int32_t x2119 = x2115;
int32_t x2120 = x2119 + x2117;
float x2121 = x120[x2120];
float x2122 = x2005[x2116];
float x2123 = x2121 * x2122;
float x2124 = x2118 + x2123;
x537[x2117] = x2124;

}
x2115 += 150;

}
// add_cartesian
int32_t x2132 = 0;
for(int x2133=0; x2133 < 150; x2133++) {
for(int x2134=0; x2134 < 150; x2134++) {
int32_t x2135 = x2132;
int32_t x2136 = x2135 + x2134;
float x2137 = x251[x2136];
float x2138 = x527[x2134];
float x2139 = x1982[x2133];
float x2140 = x2138 * x2139;
float x2141 = x2137 + x2140;
x251[x2136] = x2141;

}
x2132 += 150;

}
int32_t x2148 = 0;
for(int x2149=0; x2149 < 150; x2149++) {
for(int x2150=0; x2150 < 150; x2150++) {
float x2151 = x528[x2150];
int32_t x2152 = x2148;
int32_t x2153 = x2152 + x2150;
float x2154 = x112[x2153];
float x2155 = x1982[x2149];
float x2156 = x2154 * x2155;
float x2157 = x2151 + x2156;
x528[x2150] = x2157;

}
x2148 += 150;

}
}
};
x560(x2220);
for(int x2224=0; x2224 < 150; x2224++) {
float x2225 = x2198[x2224];
float x2226 = x2203[x2224];
float x2229 = x2215[x2224];
float x2227 = 1.0f - x2226;
float x2228 = x2227 * x2226;
float x2230 = x2228 * x2229;
float x2231 = x2225 + x2230;
x2198[x2224] = x2231;

}
// backpropagate +
for(int x2236=0; x2236 < 150; x2236++) {
float x2237 = x2185[x2236];
float x2238 = x2198[x2236];
float x2239 = x2237 + x2238;
x2185[x2236] = x2239;

}
for(int x2243=0; x2243 < 150; x2243++) {
float x2244 = x211[x2243];
float x2245 = x2198[x2243];
float x2246 = x2244 + x2245;
x211[x2243] = x2246;

}
// add_cartesian
int32_t x2251 = 0;
for(int x2252=0; x2252 < 150; x2252++) {
for(int x2253=0; x2253 < 300; x2253++) {
int32_t x2254 = x2251;
int32_t x2255 = x2254 + x2253;
float x2256 = x206[x2255];
float x2257 = x556[x2253];
float x2258 = x2185[x2252];
float x2259 = x2257 * x2258;
float x2260 = x2256 + x2259;
x206[x2255] = x2260;

}
x2251 += 300;

}
int32_t x2267 = 0;
for(int x2268=0; x2268 < 150; x2268++) {
for(int x2269=0; x2269 < 300; x2269++) {
float x2270 = x557[x2269];
int32_t x2271 = x2267;
int32_t x2272 = x2271 + x2269;
float x2273 = x49[x2272];
float x2274 = x2185[x2268];
float x2275 = x2273 * x2274;
float x2276 = x2270 + x2275;
x557[x2269] = x2276;

}
x2267 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2285 = 0;
float* x2286 = (float*)myMalloc(150 * sizeof(float));
for(int x2287=0; x2287 < 150; x2287++) {
float x2288 = 0.0f;
for(int x2289=0; x2289 < 150; x2289++) {
int32_t x2290 = x2285;
float x2291 = x90[x2290];
float x2292 = x527[x2289];
float x2293 = x2291 * x2292;
x2288 += x2293;
x2285 += 1;

}
float x2298 = x2288;
x2286[x2287] = x2298;

}
float* x2302 = (float*)myMalloc(150 * sizeof(float));
for(int x2303=0; x2303 < 150; x2303++) {
x2302[x2303] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2308 = 0;
float* x2309 = (float*)myMalloc(150 * sizeof(float));
for(int x2310=0; x2310 < 150; x2310++) {
float x2311 = 0.0f;
for(int x2312=0; x2312 < 150; x2312++) {
int32_t x2313 = x2308;
float x2314 = x99[x2313];
float x2315 = x536[x2312];
float x2316 = x2314 * x2315;
x2311 += x2316;
x2308 += 1;

}
float x2321 = x2311;
x2309[x2310] = x2321;

}
float* x2325 = (float*)myMalloc(150 * sizeof(float));
for(int x2326=0; x2326 < 150; x2326++) {
x2325[x2326] = 0.0f;

}
float* x2330 = (float*)myMalloc(150 * sizeof(float));
for(int x2331=0; x2331 < 150; x2331++) {
float x2332 = x2286[x2331];
float x2333 = x2309[x2331];
float x2334 = x2332 + x2333;
x2330[x2331] = x2334;

}
float* x2338 = (float*)myMalloc(150 * sizeof(float));
for(int x2339=0; x2339 < 150; x2339++) {
x2338[x2339] = 0.0f;

}
float* x2343 = (float*)myMalloc(150 * sizeof(float));
for(int x2344=0; x2344 < 150; x2344++) {
float x2345 = x2330[x2344];
float x2346 = x107[x2344];
float x2347 = x2345 + x2346;
x2343[x2344] = x2347;

}
float* x2351 = (float*)myMalloc(150 * sizeof(float));
for(int x2352=0; x2352 < 150; x2352++) {
x2351[x2352] = 0.0f;

}
float* x2356 = (float*)myMalloc(150 * sizeof(float));
for(int x2357=0; x2357 < 150; x2357++) {
float x2358 = x2343[x2357];
float x2359 = -1.0f * x2358;
double x2360 = (double)x2359;
double x2361 = exp(x2360);
float x2362 = (float)x2361;
float x2363 = x2362 + 1.0f;
float x2364 = 1.0f / x2363;
x2356[x2357] = x2364;

}
float* x2368 = (float*)myMalloc(150 * sizeof(float));
for(int x2369=0; x2369 < 150; x2369++) {
x2368[x2369] = 0.0f;

}
float** x2373 = (float**)myMalloc(2 * sizeof(float*));
x2373[0] = x2356;
x2373[1] = x2368;
function<void(float**)> x560 = [&](float** x561) {
float* x562 = x561[0];
float* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
float** x1959 = (float**)myMalloc(2 * sizeof(float*));
x1959[0] = x326;
x1959[1] = x331;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1751 = (float**)myMalloc(2 * sizeof(float*));
x1751[0] = x326;
x1751[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1751);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1757 = 0;
float* x1758 = (float*)myMalloc(150 * sizeof(float));
for(int x1759=0; x1759 < 150; x1759++) {
float x1760 = 0.0f;
for(int x1761=0; x1761 < 150; x1761++) {
int32_t x1762 = x1757;
float x1763 = x128[x1762];
float x1764 = x527[x1761];
float x1765 = x1763 * x1764;
x1760 += x1765;
x1757 += 1;

}
float x1770 = x1760;
x1758[x1759] = x1770;

}
float* x1774 = (float*)myMalloc(150 * sizeof(float));
for(int x1775=0; x1775 < 150; x1775++) {
x1774[x1775] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1780 = 0;
float* x1781 = (float*)myMalloc(150 * sizeof(float));
for(int x1782=0; x1782 < 150; x1782++) {
float x1783 = 0.0f;
for(int x1784=0; x1784 < 150; x1784++) {
int32_t x1785 = x1780;
float x1786 = x136[x1785];
float x1787 = x536[x1784];
float x1788 = x1786 * x1787;
x1783 += x1788;
x1780 += 1;

}
float x1793 = x1783;
x1781[x1782] = x1793;

}
float* x1797 = (float*)myMalloc(150 * sizeof(float));
for(int x1798=0; x1798 < 150; x1798++) {
x1797[x1798] = 0.0f;

}
float* x1802 = (float*)myMalloc(150 * sizeof(float));
for(int x1803=0; x1803 < 150; x1803++) {
float x1804 = x1758[x1803];
float x1805 = x1781[x1803];
float x1806 = x1804 + x1805;
x1802[x1803] = x1806;

}
float* x1810 = (float*)myMalloc(150 * sizeof(float));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0f;

}
float* x1815 = (float*)myMalloc(150 * sizeof(float));
for(int x1816=0; x1816 < 150; x1816++) {
float x1817 = x1802[x1816];
float x1818 = x144[x1816];
float x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
float* x1823 = (float*)myMalloc(150 * sizeof(float));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0f;

}
float* x1828 = (float*)myMalloc(150 * sizeof(float));
for(int x1829=0; x1829 < 150; x1829++) {
float x1830 = x1815[x1829];
float x1831 = -1.0f * x1830;
double x1832 = (double)x1831;
double x1833 = exp(x1832);
float x1834 = (float)x1833;
float x1835 = x1834 + 1.0f;
float x1836 = 1.0f / x1835;
x1828[x1829] = x1836;

}
float* x1840 = (float*)myMalloc(150 * sizeof(float));
for(int x1841=0; x1841 < 150; x1841++) {
x1840[x1841] = 0.0f;

}
float** x1845 = (float**)myMalloc(2 * sizeof(float*));
x1845[0] = x1828;
x1845[1] = x1840;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1845);
for(int x1849=0; x1849 < 150; x1849++) {
float x1850 = x1823[x1849];
float x1851 = x1828[x1849];
float x1854 = x1840[x1849];
float x1852 = 1.0f - x1851;
float x1853 = x1852 * x1851;
float x1855 = x1853 * x1854;
float x1856 = x1850 + x1855;
x1823[x1849] = x1856;

}
// backpropagate +
for(int x1861=0; x1861 < 150; x1861++) {
float x1862 = x1810[x1861];
float x1863 = x1823[x1861];
float x1864 = x1862 + x1863;
x1810[x1861] = x1864;

}
for(int x1868=0; x1868 < 150; x1868++) {
float x1869 = x271[x1868];
float x1870 = x1823[x1868];
float x1871 = x1869 + x1870;
x271[x1868] = x1871;

}
// backpropagate +
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1774[x1876];
float x1878 = x1810[x1876];
float x1879 = x1877 + x1878;
x1774[x1876] = x1879;

}
for(int x1883=0; x1883 < 150; x1883++) {
float x1884 = x1797[x1883];
float x1885 = x1810[x1883];
float x1886 = x1884 + x1885;
x1797[x1883] = x1886;

}
// add_cartesian
int32_t x1891 = 0;
for(int x1892=0; x1892 < 150; x1892++) {
for(int x1893=0; x1893 < 150; x1893++) {
int32_t x1894 = x1891;
int32_t x1895 = x1894 + x1893;
float x1896 = x266[x1895];
float x1897 = x536[x1893];
float x1898 = x1797[x1892];
float x1899 = x1897 * x1898;
float x1900 = x1896 + x1899;
x266[x1895] = x1900;

}
x1891 += 150;

}
int32_t x1907 = 0;
for(int x1908=0; x1908 < 150; x1908++) {
for(int x1909=0; x1909 < 150; x1909++) {
float x1910 = x537[x1909];
int32_t x1911 = x1907;
int32_t x1912 = x1911 + x1909;
float x1913 = x136[x1912];
float x1914 = x1797[x1908];
float x1915 = x1913 * x1914;
float x1916 = x1910 + x1915;
x537[x1909] = x1916;

}
x1907 += 150;

}
// add_cartesian
int32_t x1924 = 0;
for(int x1925=0; x1925 < 150; x1925++) {
for(int x1926=0; x1926 < 150; x1926++) {
int32_t x1927 = x1924;
int32_t x1928 = x1927 + x1926;
float x1929 = x261[x1928];
float x1930 = x527[x1926];
float x1931 = x1774[x1925];
float x1932 = x1930 * x1931;
float x1933 = x1929 + x1932;
x261[x1928] = x1933;

}
x1924 += 150;

}
int32_t x1940 = 0;
for(int x1941=0; x1941 < 150; x1941++) {
for(int x1942=0; x1942 < 150; x1942++) {
float x1943 = x528[x1942];
int32_t x1944 = x1940;
int32_t x1945 = x1944 + x1942;
float x1946 = x128[x1945];
float x1947 = x1774[x1941];
float x1948 = x1946 * x1947;
float x1949 = x1943 + x1948;
x528[x1942] = x1949;

}
x1940 += 150;

}
}
};
x566(x1959);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1965 = 0;
float* x1966 = (float*)myMalloc(150 * sizeof(float));
for(int x1967=0; x1967 < 150; x1967++) {
float x1968 = 0.0f;
for(int x1969=0; x1969 < 150; x1969++) {
int32_t x1970 = x1965;
float x1971 = x112[x1970];
float x1972 = x527[x1969];
float x1973 = x1971 * x1972;
x1968 += x1973;
x1965 += 1;

}
float x1978 = x1968;
x1966[x1967] = x1978;

}
float* x1982 = (float*)myMalloc(150 * sizeof(float));
for(int x1983=0; x1983 < 150; x1983++) {
x1982[x1983] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1988 = 0;
float* x1989 = (float*)myMalloc(150 * sizeof(float));
for(int x1990=0; x1990 < 150; x1990++) {
float x1991 = 0.0f;
for(int x1992=0; x1992 < 150; x1992++) {
int32_t x1993 = x1988;
float x1994 = x120[x1993];
float x1995 = x536[x1992];
float x1996 = x1994 * x1995;
x1991 += x1996;
x1988 += 1;

}
float x2001 = x1991;
x1989[x1990] = x2001;

}
float* x2005 = (float*)myMalloc(150 * sizeof(float));
for(int x2006=0; x2006 < 150; x2006++) {
x2005[x2006] = 0.0f;

}
float* x2010 = (float*)myMalloc(150 * sizeof(float));
for(int x2011=0; x2011 < 150; x2011++) {
float x2012 = x1966[x2011];
float x2013 = x1989[x2011];
float x2014 = x2012 + x2013;
x2010[x2011] = x2014;

}
float* x2018 = (float*)myMalloc(150 * sizeof(float));
for(int x2019=0; x2019 < 150; x2019++) {
x2018[x2019] = 0.0f;

}
float* x2023 = (float*)myMalloc(150 * sizeof(float));
for(int x2024=0; x2024 < 150; x2024++) {
float x2025 = x2010[x2024];
float x2026 = x144[x2024];
float x2027 = x2025 + x2026;
x2023[x2024] = x2027;

}
float* x2031 = (float*)myMalloc(150 * sizeof(float));
for(int x2032=0; x2032 < 150; x2032++) {
x2031[x2032] = 0.0f;

}
float* x2036 = (float*)myMalloc(150 * sizeof(float));
for(int x2037=0; x2037 < 150; x2037++) {
float x2038 = x2023[x2037];
float x2039 = -1.0f * x2038;
double x2040 = (double)x2039;
double x2041 = exp(x2040);
float x2042 = (float)x2041;
float x2043 = x2042 + 1.0f;
float x2044 = 1.0f / x2043;
x2036[x2037] = x2044;

}
float* x2048 = (float*)myMalloc(150 * sizeof(float));
for(int x2049=0; x2049 < 150; x2049++) {
x2048[x2049] = 0.0f;

}
float** x2053 = (float**)myMalloc(2 * sizeof(float*));
x2053[0] = x2036;
x2053[1] = x2048;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1751 = (float**)myMalloc(2 * sizeof(float*));
x1751[0] = x326;
x1751[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1751);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1757 = 0;
float* x1758 = (float*)myMalloc(150 * sizeof(float));
for(int x1759=0; x1759 < 150; x1759++) {
float x1760 = 0.0f;
for(int x1761=0; x1761 < 150; x1761++) {
int32_t x1762 = x1757;
float x1763 = x128[x1762];
float x1764 = x527[x1761];
float x1765 = x1763 * x1764;
x1760 += x1765;
x1757 += 1;

}
float x1770 = x1760;
x1758[x1759] = x1770;

}
float* x1774 = (float*)myMalloc(150 * sizeof(float));
for(int x1775=0; x1775 < 150; x1775++) {
x1774[x1775] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1780 = 0;
float* x1781 = (float*)myMalloc(150 * sizeof(float));
for(int x1782=0; x1782 < 150; x1782++) {
float x1783 = 0.0f;
for(int x1784=0; x1784 < 150; x1784++) {
int32_t x1785 = x1780;
float x1786 = x136[x1785];
float x1787 = x536[x1784];
float x1788 = x1786 * x1787;
x1783 += x1788;
x1780 += 1;

}
float x1793 = x1783;
x1781[x1782] = x1793;

}
float* x1797 = (float*)myMalloc(150 * sizeof(float));
for(int x1798=0; x1798 < 150; x1798++) {
x1797[x1798] = 0.0f;

}
float* x1802 = (float*)myMalloc(150 * sizeof(float));
for(int x1803=0; x1803 < 150; x1803++) {
float x1804 = x1758[x1803];
float x1805 = x1781[x1803];
float x1806 = x1804 + x1805;
x1802[x1803] = x1806;

}
float* x1810 = (float*)myMalloc(150 * sizeof(float));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0f;

}
float* x1815 = (float*)myMalloc(150 * sizeof(float));
for(int x1816=0; x1816 < 150; x1816++) {
float x1817 = x1802[x1816];
float x1818 = x144[x1816];
float x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
float* x1823 = (float*)myMalloc(150 * sizeof(float));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0f;

}
float* x1828 = (float*)myMalloc(150 * sizeof(float));
for(int x1829=0; x1829 < 150; x1829++) {
float x1830 = x1815[x1829];
float x1831 = -1.0f * x1830;
double x1832 = (double)x1831;
double x1833 = exp(x1832);
float x1834 = (float)x1833;
float x1835 = x1834 + 1.0f;
float x1836 = 1.0f / x1835;
x1828[x1829] = x1836;

}
float* x1840 = (float*)myMalloc(150 * sizeof(float));
for(int x1841=0; x1841 < 150; x1841++) {
x1840[x1841] = 0.0f;

}
float** x1845 = (float**)myMalloc(2 * sizeof(float*));
x1845[0] = x1828;
x1845[1] = x1840;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1845);
for(int x1849=0; x1849 < 150; x1849++) {
float x1850 = x1823[x1849];
float x1851 = x1828[x1849];
float x1854 = x1840[x1849];
float x1852 = 1.0f - x1851;
float x1853 = x1852 * x1851;
float x1855 = x1853 * x1854;
float x1856 = x1850 + x1855;
x1823[x1849] = x1856;

}
// backpropagate +
for(int x1861=0; x1861 < 150; x1861++) {
float x1862 = x1810[x1861];
float x1863 = x1823[x1861];
float x1864 = x1862 + x1863;
x1810[x1861] = x1864;

}
for(int x1868=0; x1868 < 150; x1868++) {
float x1869 = x271[x1868];
float x1870 = x1823[x1868];
float x1871 = x1869 + x1870;
x271[x1868] = x1871;

}
// backpropagate +
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1774[x1876];
float x1878 = x1810[x1876];
float x1879 = x1877 + x1878;
x1774[x1876] = x1879;

}
for(int x1883=0; x1883 < 150; x1883++) {
float x1884 = x1797[x1883];
float x1885 = x1810[x1883];
float x1886 = x1884 + x1885;
x1797[x1883] = x1886;

}
// add_cartesian
int32_t x1891 = 0;
for(int x1892=0; x1892 < 150; x1892++) {
for(int x1893=0; x1893 < 150; x1893++) {
int32_t x1894 = x1891;
int32_t x1895 = x1894 + x1893;
float x1896 = x266[x1895];
float x1897 = x536[x1893];
float x1898 = x1797[x1892];
float x1899 = x1897 * x1898;
float x1900 = x1896 + x1899;
x266[x1895] = x1900;

}
x1891 += 150;

}
int32_t x1907 = 0;
for(int x1908=0; x1908 < 150; x1908++) {
for(int x1909=0; x1909 < 150; x1909++) {
float x1910 = x537[x1909];
int32_t x1911 = x1907;
int32_t x1912 = x1911 + x1909;
float x1913 = x136[x1912];
float x1914 = x1797[x1908];
float x1915 = x1913 * x1914;
float x1916 = x1910 + x1915;
x537[x1909] = x1916;

}
x1907 += 150;

}
// add_cartesian
int32_t x1924 = 0;
for(int x1925=0; x1925 < 150; x1925++) {
for(int x1926=0; x1926 < 150; x1926++) {
int32_t x1927 = x1924;
int32_t x1928 = x1927 + x1926;
float x1929 = x261[x1928];
float x1930 = x527[x1926];
float x1931 = x1774[x1925];
float x1932 = x1930 * x1931;
float x1933 = x1929 + x1932;
x261[x1928] = x1933;

}
x1924 += 150;

}
int32_t x1940 = 0;
for(int x1941=0; x1941 < 150; x1941++) {
for(int x1942=0; x1942 < 150; x1942++) {
float x1943 = x528[x1942];
int32_t x1944 = x1940;
int32_t x1945 = x1944 + x1942;
float x1946 = x128[x1945];
float x1947 = x1774[x1941];
float x1948 = x1946 * x1947;
float x1949 = x1943 + x1948;
x528[x1942] = x1949;

}
x1940 += 150;

}
}
};
x566(x2053);
for(int x2057=0; x2057 < 150; x2057++) {
float x2058 = x2031[x2057];
float x2059 = x2036[x2057];
float x2062 = x2048[x2057];
float x2060 = 1.0f - x2059;
float x2061 = x2060 * x2059;
float x2063 = x2061 * x2062;
float x2064 = x2058 + x2063;
x2031[x2057] = x2064;

}
// backpropagate +
for(int x2069=0; x2069 < 150; x2069++) {
float x2070 = x2018[x2069];
float x2071 = x2031[x2069];
float x2072 = x2070 + x2071;
x2018[x2069] = x2072;

}
for(int x2076=0; x2076 < 150; x2076++) {
float x2077 = x271[x2076];
float x2078 = x2031[x2076];
float x2079 = x2077 + x2078;
x271[x2076] = x2079;

}
// backpropagate +
for(int x2084=0; x2084 < 150; x2084++) {
float x2085 = x1982[x2084];
float x2086 = x2018[x2084];
float x2087 = x2085 + x2086;
x1982[x2084] = x2087;

}
for(int x2091=0; x2091 < 150; x2091++) {
float x2092 = x2005[x2091];
float x2093 = x2018[x2091];
float x2094 = x2092 + x2093;
x2005[x2091] = x2094;

}
// add_cartesian
int32_t x2099 = 0;
for(int x2100=0; x2100 < 150; x2100++) {
for(int x2101=0; x2101 < 150; x2101++) {
int32_t x2102 = x2099;
int32_t x2103 = x2102 + x2101;
float x2104 = x256[x2103];
float x2105 = x536[x2101];
float x2106 = x2005[x2100];
float x2107 = x2105 * x2106;
float x2108 = x2104 + x2107;
x256[x2103] = x2108;

}
x2099 += 150;

}
int32_t x2115 = 0;
for(int x2116=0; x2116 < 150; x2116++) {
for(int x2117=0; x2117 < 150; x2117++) {
float x2118 = x537[x2117];
int32_t x2119 = x2115;
int32_t x2120 = x2119 + x2117;
float x2121 = x120[x2120];
float x2122 = x2005[x2116];
float x2123 = x2121 * x2122;
float x2124 = x2118 + x2123;
x537[x2117] = x2124;

}
x2115 += 150;

}
// add_cartesian
int32_t x2132 = 0;
for(int x2133=0; x2133 < 150; x2133++) {
for(int x2134=0; x2134 < 150; x2134++) {
int32_t x2135 = x2132;
int32_t x2136 = x2135 + x2134;
float x2137 = x251[x2136];
float x2138 = x527[x2134];
float x2139 = x1982[x2133];
float x2140 = x2138 * x2139;
float x2141 = x2137 + x2140;
x251[x2136] = x2141;

}
x2132 += 150;

}
int32_t x2148 = 0;
for(int x2149=0; x2149 < 150; x2149++) {
for(int x2150=0; x2150 < 150; x2150++) {
float x2151 = x528[x2150];
int32_t x2152 = x2148;
int32_t x2153 = x2152 + x2150;
float x2154 = x112[x2153];
float x2155 = x1982[x2149];
float x2156 = x2154 * x2155;
float x2157 = x2151 + x2156;
x528[x2150] = x2157;

}
x2148 += 150;

}
}
};
x560(x2373);
for(int x2377=0; x2377 < 150; x2377++) {
float x2378 = x2351[x2377];
float x2379 = x2356[x2377];
float x2382 = x2368[x2377];
float x2380 = 1.0f - x2379;
float x2381 = x2380 * x2379;
float x2383 = x2381 * x2382;
float x2384 = x2378 + x2383;
x2351[x2377] = x2384;

}
// backpropagate +
for(int x2389=0; x2389 < 150; x2389++) {
float x2390 = x2338[x2389];
float x2391 = x2351[x2389];
float x2392 = x2390 + x2391;
x2338[x2389] = x2392;

}
for(int x2396=0; x2396 < 150; x2396++) {
float x2397 = x246[x2396];
float x2398 = x2351[x2396];
float x2399 = x2397 + x2398;
x246[x2396] = x2399;

}
// backpropagate +
for(int x2404=0; x2404 < 150; x2404++) {
float x2405 = x2302[x2404];
float x2406 = x2338[x2404];
float x2407 = x2405 + x2406;
x2302[x2404] = x2407;

}
for(int x2411=0; x2411 < 150; x2411++) {
float x2412 = x2325[x2411];
float x2413 = x2338[x2411];
float x2414 = x2412 + x2413;
x2325[x2411] = x2414;

}
// add_cartesian
int32_t x2419 = 0;
for(int x2420=0; x2420 < 150; x2420++) {
for(int x2421=0; x2421 < 150; x2421++) {
int32_t x2422 = x2419;
int32_t x2423 = x2422 + x2421;
float x2424 = x241[x2423];
float x2425 = x536[x2421];
float x2426 = x2325[x2420];
float x2427 = x2425 * x2426;
float x2428 = x2424 + x2427;
x241[x2423] = x2428;

}
x2419 += 150;

}
int32_t x2435 = 0;
for(int x2436=0; x2436 < 150; x2436++) {
for(int x2437=0; x2437 < 150; x2437++) {
float x2438 = x537[x2437];
int32_t x2439 = x2435;
int32_t x2440 = x2439 + x2437;
float x2441 = x99[x2440];
float x2442 = x2325[x2436];
float x2443 = x2441 * x2442;
float x2444 = x2438 + x2443;
x537[x2437] = x2444;

}
x2435 += 150;

}
// add_cartesian
int32_t x2452 = 0;
for(int x2453=0; x2453 < 150; x2453++) {
for(int x2454=0; x2454 < 150; x2454++) {
int32_t x2455 = x2452;
int32_t x2456 = x2455 + x2454;
float x2457 = x236[x2456];
float x2458 = x527[x2454];
float x2459 = x2302[x2453];
float x2460 = x2458 * x2459;
float x2461 = x2457 + x2460;
x236[x2456] = x2461;

}
x2452 += 150;

}
int32_t x2468 = 0;
for(int x2469=0; x2469 < 150; x2469++) {
for(int x2470=0; x2470 < 150; x2470++) {
float x2471 = x528[x2470];
int32_t x2472 = x2468;
int32_t x2473 = x2472 + x2470;
float x2474 = x90[x2473];
float x2475 = x2302[x2469];
float x2476 = x2474 * x2475;
float x2477 = x2471 + x2476;
x528[x2470] = x2477;

}
x2468 += 150;

}
}
};
x554(x2494);
} else {
float** x2499 = (float**)myMalloc(2 * sizeof(float*));
x2499[0] = x316;
x2499[1] = x321;
function<void(float**)> x554 = [&](float** x555) {
float* x556 = x555[0];
float* x557 = x555[1];
int32_t x558 = x459[x512];
bool x559 = x558 < 0;
if (x559) {
// dot List(150, 300) - WrappedArray(300)
int32_t x2168 = 0;
float* x2169 = (float*)myMalloc(150 * sizeof(float));
for(int x2170=0; x2170 < 150; x2170++) {
float x2171 = 0.0f;
for(int x2172=0; x2172 < 300; x2172++) {
int32_t x2173 = x2168;
float x2174 = x49[x2173];
float x2175 = x556[x2172];
float x2176 = x2174 * x2175;
x2171 += x2176;
x2168 += 1;

}
float x2181 = x2171;
x2169[x2170] = x2181;

}
float* x2185 = (float*)myMalloc(150 * sizeof(float));
for(int x2186=0; x2186 < 150; x2186++) {
x2185[x2186] = 0.0f;

}
float* x2190 = (float*)myMalloc(150 * sizeof(float));
for(int x2191=0; x2191 < 150; x2191++) {
float x2192 = x2169[x2191];
float x2193 = x58[x2191];
float x2194 = x2192 + x2193;
x2190[x2191] = x2194;

}
float* x2198 = (float*)myMalloc(150 * sizeof(float));
for(int x2199=0; x2199 < 150; x2199++) {
x2198[x2199] = 0.0f;

}
float* x2203 = (float*)myMalloc(150 * sizeof(float));
for(int x2204=0; x2204 < 150; x2204++) {
float x2205 = x2190[x2204];
float x2206 = -1.0f * x2205;
double x2207 = (double)x2206;
double x2208 = exp(x2207);
float x2209 = (float)x2208;
float x2210 = x2209 + 1.0f;
float x2211 = 1.0f / x2210;
x2203[x2204] = x2211;

}
float* x2215 = (float*)myMalloc(150 * sizeof(float));
for(int x2216=0; x2216 < 150; x2216++) {
x2215[x2216] = 0.0f;

}
float** x2220 = (float**)myMalloc(2 * sizeof(float*));
x2220[0] = x2203;
x2220[1] = x2215;
function<void(float**)> x560 = [&](float** x561) {
float* x562 = x561[0];
float* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
float** x1959 = (float**)myMalloc(2 * sizeof(float*));
x1959[0] = x326;
x1959[1] = x331;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1751 = (float**)myMalloc(2 * sizeof(float*));
x1751[0] = x326;
x1751[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1751);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1757 = 0;
float* x1758 = (float*)myMalloc(150 * sizeof(float));
for(int x1759=0; x1759 < 150; x1759++) {
float x1760 = 0.0f;
for(int x1761=0; x1761 < 150; x1761++) {
int32_t x1762 = x1757;
float x1763 = x128[x1762];
float x1764 = x527[x1761];
float x1765 = x1763 * x1764;
x1760 += x1765;
x1757 += 1;

}
float x1770 = x1760;
x1758[x1759] = x1770;

}
float* x1774 = (float*)myMalloc(150 * sizeof(float));
for(int x1775=0; x1775 < 150; x1775++) {
x1774[x1775] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1780 = 0;
float* x1781 = (float*)myMalloc(150 * sizeof(float));
for(int x1782=0; x1782 < 150; x1782++) {
float x1783 = 0.0f;
for(int x1784=0; x1784 < 150; x1784++) {
int32_t x1785 = x1780;
float x1786 = x136[x1785];
float x1787 = x536[x1784];
float x1788 = x1786 * x1787;
x1783 += x1788;
x1780 += 1;

}
float x1793 = x1783;
x1781[x1782] = x1793;

}
float* x1797 = (float*)myMalloc(150 * sizeof(float));
for(int x1798=0; x1798 < 150; x1798++) {
x1797[x1798] = 0.0f;

}
float* x1802 = (float*)myMalloc(150 * sizeof(float));
for(int x1803=0; x1803 < 150; x1803++) {
float x1804 = x1758[x1803];
float x1805 = x1781[x1803];
float x1806 = x1804 + x1805;
x1802[x1803] = x1806;

}
float* x1810 = (float*)myMalloc(150 * sizeof(float));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0f;

}
float* x1815 = (float*)myMalloc(150 * sizeof(float));
for(int x1816=0; x1816 < 150; x1816++) {
float x1817 = x1802[x1816];
float x1818 = x144[x1816];
float x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
float* x1823 = (float*)myMalloc(150 * sizeof(float));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0f;

}
float* x1828 = (float*)myMalloc(150 * sizeof(float));
for(int x1829=0; x1829 < 150; x1829++) {
float x1830 = x1815[x1829];
float x1831 = -1.0f * x1830;
double x1832 = (double)x1831;
double x1833 = exp(x1832);
float x1834 = (float)x1833;
float x1835 = x1834 + 1.0f;
float x1836 = 1.0f / x1835;
x1828[x1829] = x1836;

}
float* x1840 = (float*)myMalloc(150 * sizeof(float));
for(int x1841=0; x1841 < 150; x1841++) {
x1840[x1841] = 0.0f;

}
float** x1845 = (float**)myMalloc(2 * sizeof(float*));
x1845[0] = x1828;
x1845[1] = x1840;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1845);
for(int x1849=0; x1849 < 150; x1849++) {
float x1850 = x1823[x1849];
float x1851 = x1828[x1849];
float x1854 = x1840[x1849];
float x1852 = 1.0f - x1851;
float x1853 = x1852 * x1851;
float x1855 = x1853 * x1854;
float x1856 = x1850 + x1855;
x1823[x1849] = x1856;

}
// backpropagate +
for(int x1861=0; x1861 < 150; x1861++) {
float x1862 = x1810[x1861];
float x1863 = x1823[x1861];
float x1864 = x1862 + x1863;
x1810[x1861] = x1864;

}
for(int x1868=0; x1868 < 150; x1868++) {
float x1869 = x271[x1868];
float x1870 = x1823[x1868];
float x1871 = x1869 + x1870;
x271[x1868] = x1871;

}
// backpropagate +
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1774[x1876];
float x1878 = x1810[x1876];
float x1879 = x1877 + x1878;
x1774[x1876] = x1879;

}
for(int x1883=0; x1883 < 150; x1883++) {
float x1884 = x1797[x1883];
float x1885 = x1810[x1883];
float x1886 = x1884 + x1885;
x1797[x1883] = x1886;

}
// add_cartesian
int32_t x1891 = 0;
for(int x1892=0; x1892 < 150; x1892++) {
for(int x1893=0; x1893 < 150; x1893++) {
int32_t x1894 = x1891;
int32_t x1895 = x1894 + x1893;
float x1896 = x266[x1895];
float x1897 = x536[x1893];
float x1898 = x1797[x1892];
float x1899 = x1897 * x1898;
float x1900 = x1896 + x1899;
x266[x1895] = x1900;

}
x1891 += 150;

}
int32_t x1907 = 0;
for(int x1908=0; x1908 < 150; x1908++) {
for(int x1909=0; x1909 < 150; x1909++) {
float x1910 = x537[x1909];
int32_t x1911 = x1907;
int32_t x1912 = x1911 + x1909;
float x1913 = x136[x1912];
float x1914 = x1797[x1908];
float x1915 = x1913 * x1914;
float x1916 = x1910 + x1915;
x537[x1909] = x1916;

}
x1907 += 150;

}
// add_cartesian
int32_t x1924 = 0;
for(int x1925=0; x1925 < 150; x1925++) {
for(int x1926=0; x1926 < 150; x1926++) {
int32_t x1927 = x1924;
int32_t x1928 = x1927 + x1926;
float x1929 = x261[x1928];
float x1930 = x527[x1926];
float x1931 = x1774[x1925];
float x1932 = x1930 * x1931;
float x1933 = x1929 + x1932;
x261[x1928] = x1933;

}
x1924 += 150;

}
int32_t x1940 = 0;
for(int x1941=0; x1941 < 150; x1941++) {
for(int x1942=0; x1942 < 150; x1942++) {
float x1943 = x528[x1942];
int32_t x1944 = x1940;
int32_t x1945 = x1944 + x1942;
float x1946 = x128[x1945];
float x1947 = x1774[x1941];
float x1948 = x1946 * x1947;
float x1949 = x1943 + x1948;
x528[x1942] = x1949;

}
x1940 += 150;

}
}
};
x566(x1959);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1965 = 0;
float* x1966 = (float*)myMalloc(150 * sizeof(float));
for(int x1967=0; x1967 < 150; x1967++) {
float x1968 = 0.0f;
for(int x1969=0; x1969 < 150; x1969++) {
int32_t x1970 = x1965;
float x1971 = x112[x1970];
float x1972 = x527[x1969];
float x1973 = x1971 * x1972;
x1968 += x1973;
x1965 += 1;

}
float x1978 = x1968;
x1966[x1967] = x1978;

}
float* x1982 = (float*)myMalloc(150 * sizeof(float));
for(int x1983=0; x1983 < 150; x1983++) {
x1982[x1983] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1988 = 0;
float* x1989 = (float*)myMalloc(150 * sizeof(float));
for(int x1990=0; x1990 < 150; x1990++) {
float x1991 = 0.0f;
for(int x1992=0; x1992 < 150; x1992++) {
int32_t x1993 = x1988;
float x1994 = x120[x1993];
float x1995 = x536[x1992];
float x1996 = x1994 * x1995;
x1991 += x1996;
x1988 += 1;

}
float x2001 = x1991;
x1989[x1990] = x2001;

}
float* x2005 = (float*)myMalloc(150 * sizeof(float));
for(int x2006=0; x2006 < 150; x2006++) {
x2005[x2006] = 0.0f;

}
float* x2010 = (float*)myMalloc(150 * sizeof(float));
for(int x2011=0; x2011 < 150; x2011++) {
float x2012 = x1966[x2011];
float x2013 = x1989[x2011];
float x2014 = x2012 + x2013;
x2010[x2011] = x2014;

}
float* x2018 = (float*)myMalloc(150 * sizeof(float));
for(int x2019=0; x2019 < 150; x2019++) {
x2018[x2019] = 0.0f;

}
float* x2023 = (float*)myMalloc(150 * sizeof(float));
for(int x2024=0; x2024 < 150; x2024++) {
float x2025 = x2010[x2024];
float x2026 = x144[x2024];
float x2027 = x2025 + x2026;
x2023[x2024] = x2027;

}
float* x2031 = (float*)myMalloc(150 * sizeof(float));
for(int x2032=0; x2032 < 150; x2032++) {
x2031[x2032] = 0.0f;

}
float* x2036 = (float*)myMalloc(150 * sizeof(float));
for(int x2037=0; x2037 < 150; x2037++) {
float x2038 = x2023[x2037];
float x2039 = -1.0f * x2038;
double x2040 = (double)x2039;
double x2041 = exp(x2040);
float x2042 = (float)x2041;
float x2043 = x2042 + 1.0f;
float x2044 = 1.0f / x2043;
x2036[x2037] = x2044;

}
float* x2048 = (float*)myMalloc(150 * sizeof(float));
for(int x2049=0; x2049 < 150; x2049++) {
x2048[x2049] = 0.0f;

}
float** x2053 = (float**)myMalloc(2 * sizeof(float*));
x2053[0] = x2036;
x2053[1] = x2048;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1751 = (float**)myMalloc(2 * sizeof(float*));
x1751[0] = x326;
x1751[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1751);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1757 = 0;
float* x1758 = (float*)myMalloc(150 * sizeof(float));
for(int x1759=0; x1759 < 150; x1759++) {
float x1760 = 0.0f;
for(int x1761=0; x1761 < 150; x1761++) {
int32_t x1762 = x1757;
float x1763 = x128[x1762];
float x1764 = x527[x1761];
float x1765 = x1763 * x1764;
x1760 += x1765;
x1757 += 1;

}
float x1770 = x1760;
x1758[x1759] = x1770;

}
float* x1774 = (float*)myMalloc(150 * sizeof(float));
for(int x1775=0; x1775 < 150; x1775++) {
x1774[x1775] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1780 = 0;
float* x1781 = (float*)myMalloc(150 * sizeof(float));
for(int x1782=0; x1782 < 150; x1782++) {
float x1783 = 0.0f;
for(int x1784=0; x1784 < 150; x1784++) {
int32_t x1785 = x1780;
float x1786 = x136[x1785];
float x1787 = x536[x1784];
float x1788 = x1786 * x1787;
x1783 += x1788;
x1780 += 1;

}
float x1793 = x1783;
x1781[x1782] = x1793;

}
float* x1797 = (float*)myMalloc(150 * sizeof(float));
for(int x1798=0; x1798 < 150; x1798++) {
x1797[x1798] = 0.0f;

}
float* x1802 = (float*)myMalloc(150 * sizeof(float));
for(int x1803=0; x1803 < 150; x1803++) {
float x1804 = x1758[x1803];
float x1805 = x1781[x1803];
float x1806 = x1804 + x1805;
x1802[x1803] = x1806;

}
float* x1810 = (float*)myMalloc(150 * sizeof(float));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0f;

}
float* x1815 = (float*)myMalloc(150 * sizeof(float));
for(int x1816=0; x1816 < 150; x1816++) {
float x1817 = x1802[x1816];
float x1818 = x144[x1816];
float x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
float* x1823 = (float*)myMalloc(150 * sizeof(float));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0f;

}
float* x1828 = (float*)myMalloc(150 * sizeof(float));
for(int x1829=0; x1829 < 150; x1829++) {
float x1830 = x1815[x1829];
float x1831 = -1.0f * x1830;
double x1832 = (double)x1831;
double x1833 = exp(x1832);
float x1834 = (float)x1833;
float x1835 = x1834 + 1.0f;
float x1836 = 1.0f / x1835;
x1828[x1829] = x1836;

}
float* x1840 = (float*)myMalloc(150 * sizeof(float));
for(int x1841=0; x1841 < 150; x1841++) {
x1840[x1841] = 0.0f;

}
float** x1845 = (float**)myMalloc(2 * sizeof(float*));
x1845[0] = x1828;
x1845[1] = x1840;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1845);
for(int x1849=0; x1849 < 150; x1849++) {
float x1850 = x1823[x1849];
float x1851 = x1828[x1849];
float x1854 = x1840[x1849];
float x1852 = 1.0f - x1851;
float x1853 = x1852 * x1851;
float x1855 = x1853 * x1854;
float x1856 = x1850 + x1855;
x1823[x1849] = x1856;

}
// backpropagate +
for(int x1861=0; x1861 < 150; x1861++) {
float x1862 = x1810[x1861];
float x1863 = x1823[x1861];
float x1864 = x1862 + x1863;
x1810[x1861] = x1864;

}
for(int x1868=0; x1868 < 150; x1868++) {
float x1869 = x271[x1868];
float x1870 = x1823[x1868];
float x1871 = x1869 + x1870;
x271[x1868] = x1871;

}
// backpropagate +
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1774[x1876];
float x1878 = x1810[x1876];
float x1879 = x1877 + x1878;
x1774[x1876] = x1879;

}
for(int x1883=0; x1883 < 150; x1883++) {
float x1884 = x1797[x1883];
float x1885 = x1810[x1883];
float x1886 = x1884 + x1885;
x1797[x1883] = x1886;

}
// add_cartesian
int32_t x1891 = 0;
for(int x1892=0; x1892 < 150; x1892++) {
for(int x1893=0; x1893 < 150; x1893++) {
int32_t x1894 = x1891;
int32_t x1895 = x1894 + x1893;
float x1896 = x266[x1895];
float x1897 = x536[x1893];
float x1898 = x1797[x1892];
float x1899 = x1897 * x1898;
float x1900 = x1896 + x1899;
x266[x1895] = x1900;

}
x1891 += 150;

}
int32_t x1907 = 0;
for(int x1908=0; x1908 < 150; x1908++) {
for(int x1909=0; x1909 < 150; x1909++) {
float x1910 = x537[x1909];
int32_t x1911 = x1907;
int32_t x1912 = x1911 + x1909;
float x1913 = x136[x1912];
float x1914 = x1797[x1908];
float x1915 = x1913 * x1914;
float x1916 = x1910 + x1915;
x537[x1909] = x1916;

}
x1907 += 150;

}
// add_cartesian
int32_t x1924 = 0;
for(int x1925=0; x1925 < 150; x1925++) {
for(int x1926=0; x1926 < 150; x1926++) {
int32_t x1927 = x1924;
int32_t x1928 = x1927 + x1926;
float x1929 = x261[x1928];
float x1930 = x527[x1926];
float x1931 = x1774[x1925];
float x1932 = x1930 * x1931;
float x1933 = x1929 + x1932;
x261[x1928] = x1933;

}
x1924 += 150;

}
int32_t x1940 = 0;
for(int x1941=0; x1941 < 150; x1941++) {
for(int x1942=0; x1942 < 150; x1942++) {
float x1943 = x528[x1942];
int32_t x1944 = x1940;
int32_t x1945 = x1944 + x1942;
float x1946 = x128[x1945];
float x1947 = x1774[x1941];
float x1948 = x1946 * x1947;
float x1949 = x1943 + x1948;
x528[x1942] = x1949;

}
x1940 += 150;

}
}
};
x566(x2053);
for(int x2057=0; x2057 < 150; x2057++) {
float x2058 = x2031[x2057];
float x2059 = x2036[x2057];
float x2062 = x2048[x2057];
float x2060 = 1.0f - x2059;
float x2061 = x2060 * x2059;
float x2063 = x2061 * x2062;
float x2064 = x2058 + x2063;
x2031[x2057] = x2064;

}
// backpropagate +
for(int x2069=0; x2069 < 150; x2069++) {
float x2070 = x2018[x2069];
float x2071 = x2031[x2069];
float x2072 = x2070 + x2071;
x2018[x2069] = x2072;

}
for(int x2076=0; x2076 < 150; x2076++) {
float x2077 = x271[x2076];
float x2078 = x2031[x2076];
float x2079 = x2077 + x2078;
x271[x2076] = x2079;

}
// backpropagate +
for(int x2084=0; x2084 < 150; x2084++) {
float x2085 = x1982[x2084];
float x2086 = x2018[x2084];
float x2087 = x2085 + x2086;
x1982[x2084] = x2087;

}
for(int x2091=0; x2091 < 150; x2091++) {
float x2092 = x2005[x2091];
float x2093 = x2018[x2091];
float x2094 = x2092 + x2093;
x2005[x2091] = x2094;

}
// add_cartesian
int32_t x2099 = 0;
for(int x2100=0; x2100 < 150; x2100++) {
for(int x2101=0; x2101 < 150; x2101++) {
int32_t x2102 = x2099;
int32_t x2103 = x2102 + x2101;
float x2104 = x256[x2103];
float x2105 = x536[x2101];
float x2106 = x2005[x2100];
float x2107 = x2105 * x2106;
float x2108 = x2104 + x2107;
x256[x2103] = x2108;

}
x2099 += 150;

}
int32_t x2115 = 0;
for(int x2116=0; x2116 < 150; x2116++) {
for(int x2117=0; x2117 < 150; x2117++) {
float x2118 = x537[x2117];
int32_t x2119 = x2115;
int32_t x2120 = x2119 + x2117;
float x2121 = x120[x2120];
float x2122 = x2005[x2116];
float x2123 = x2121 * x2122;
float x2124 = x2118 + x2123;
x537[x2117] = x2124;

}
x2115 += 150;

}
// add_cartesian
int32_t x2132 = 0;
for(int x2133=0; x2133 < 150; x2133++) {
for(int x2134=0; x2134 < 150; x2134++) {
int32_t x2135 = x2132;
int32_t x2136 = x2135 + x2134;
float x2137 = x251[x2136];
float x2138 = x527[x2134];
float x2139 = x1982[x2133];
float x2140 = x2138 * x2139;
float x2141 = x2137 + x2140;
x251[x2136] = x2141;

}
x2132 += 150;

}
int32_t x2148 = 0;
for(int x2149=0; x2149 < 150; x2149++) {
for(int x2150=0; x2150 < 150; x2150++) {
float x2151 = x528[x2150];
int32_t x2152 = x2148;
int32_t x2153 = x2152 + x2150;
float x2154 = x112[x2153];
float x2155 = x1982[x2149];
float x2156 = x2154 * x2155;
float x2157 = x2151 + x2156;
x528[x2150] = x2157;

}
x2148 += 150;

}
}
};
x560(x2220);
for(int x2224=0; x2224 < 150; x2224++) {
float x2225 = x2198[x2224];
float x2226 = x2203[x2224];
float x2229 = x2215[x2224];
float x2227 = 1.0f - x2226;
float x2228 = x2227 * x2226;
float x2230 = x2228 * x2229;
float x2231 = x2225 + x2230;
x2198[x2224] = x2231;

}
// backpropagate +
for(int x2236=0; x2236 < 150; x2236++) {
float x2237 = x2185[x2236];
float x2238 = x2198[x2236];
float x2239 = x2237 + x2238;
x2185[x2236] = x2239;

}
for(int x2243=0; x2243 < 150; x2243++) {
float x2244 = x211[x2243];
float x2245 = x2198[x2243];
float x2246 = x2244 + x2245;
x211[x2243] = x2246;

}
// add_cartesian
int32_t x2251 = 0;
for(int x2252=0; x2252 < 150; x2252++) {
for(int x2253=0; x2253 < 300; x2253++) {
int32_t x2254 = x2251;
int32_t x2255 = x2254 + x2253;
float x2256 = x206[x2255];
float x2257 = x556[x2253];
float x2258 = x2185[x2252];
float x2259 = x2257 * x2258;
float x2260 = x2256 + x2259;
x206[x2255] = x2260;

}
x2251 += 300;

}
int32_t x2267 = 0;
for(int x2268=0; x2268 < 150; x2268++) {
for(int x2269=0; x2269 < 300; x2269++) {
float x2270 = x557[x2269];
int32_t x2271 = x2267;
int32_t x2272 = x2271 + x2269;
float x2273 = x49[x2272];
float x2274 = x2185[x2268];
float x2275 = x2273 * x2274;
float x2276 = x2270 + x2275;
x557[x2269] = x2276;

}
x2267 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x2285 = 0;
float* x2286 = (float*)myMalloc(150 * sizeof(float));
for(int x2287=0; x2287 < 150; x2287++) {
float x2288 = 0.0f;
for(int x2289=0; x2289 < 150; x2289++) {
int32_t x2290 = x2285;
float x2291 = x90[x2290];
float x2292 = x527[x2289];
float x2293 = x2291 * x2292;
x2288 += x2293;
x2285 += 1;

}
float x2298 = x2288;
x2286[x2287] = x2298;

}
float* x2302 = (float*)myMalloc(150 * sizeof(float));
for(int x2303=0; x2303 < 150; x2303++) {
x2302[x2303] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x2308 = 0;
float* x2309 = (float*)myMalloc(150 * sizeof(float));
for(int x2310=0; x2310 < 150; x2310++) {
float x2311 = 0.0f;
for(int x2312=0; x2312 < 150; x2312++) {
int32_t x2313 = x2308;
float x2314 = x99[x2313];
float x2315 = x536[x2312];
float x2316 = x2314 * x2315;
x2311 += x2316;
x2308 += 1;

}
float x2321 = x2311;
x2309[x2310] = x2321;

}
float* x2325 = (float*)myMalloc(150 * sizeof(float));
for(int x2326=0; x2326 < 150; x2326++) {
x2325[x2326] = 0.0f;

}
float* x2330 = (float*)myMalloc(150 * sizeof(float));
for(int x2331=0; x2331 < 150; x2331++) {
float x2332 = x2286[x2331];
float x2333 = x2309[x2331];
float x2334 = x2332 + x2333;
x2330[x2331] = x2334;

}
float* x2338 = (float*)myMalloc(150 * sizeof(float));
for(int x2339=0; x2339 < 150; x2339++) {
x2338[x2339] = 0.0f;

}
float* x2343 = (float*)myMalloc(150 * sizeof(float));
for(int x2344=0; x2344 < 150; x2344++) {
float x2345 = x2330[x2344];
float x2346 = x107[x2344];
float x2347 = x2345 + x2346;
x2343[x2344] = x2347;

}
float* x2351 = (float*)myMalloc(150 * sizeof(float));
for(int x2352=0; x2352 < 150; x2352++) {
x2351[x2352] = 0.0f;

}
float* x2356 = (float*)myMalloc(150 * sizeof(float));
for(int x2357=0; x2357 < 150; x2357++) {
float x2358 = x2343[x2357];
float x2359 = -1.0f * x2358;
double x2360 = (double)x2359;
double x2361 = exp(x2360);
float x2362 = (float)x2361;
float x2363 = x2362 + 1.0f;
float x2364 = 1.0f / x2363;
x2356[x2357] = x2364;

}
float* x2368 = (float*)myMalloc(150 * sizeof(float));
for(int x2369=0; x2369 < 150; x2369++) {
x2368[x2369] = 0.0f;

}
float** x2373 = (float**)myMalloc(2 * sizeof(float*));
x2373[0] = x2356;
x2373[1] = x2368;
function<void(float**)> x560 = [&](float** x561) {
float* x562 = x561[0];
float* x563 = x561[1];
int32_t x564 = x459[x512];
bool x565 = x564 < 0;
if (x565) {
float** x1959 = (float**)myMalloc(2 * sizeof(float*));
x1959[0] = x326;
x1959[1] = x331;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1751 = (float**)myMalloc(2 * sizeof(float*));
x1751[0] = x326;
x1751[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1751);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1757 = 0;
float* x1758 = (float*)myMalloc(150 * sizeof(float));
for(int x1759=0; x1759 < 150; x1759++) {
float x1760 = 0.0f;
for(int x1761=0; x1761 < 150; x1761++) {
int32_t x1762 = x1757;
float x1763 = x128[x1762];
float x1764 = x527[x1761];
float x1765 = x1763 * x1764;
x1760 += x1765;
x1757 += 1;

}
float x1770 = x1760;
x1758[x1759] = x1770;

}
float* x1774 = (float*)myMalloc(150 * sizeof(float));
for(int x1775=0; x1775 < 150; x1775++) {
x1774[x1775] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1780 = 0;
float* x1781 = (float*)myMalloc(150 * sizeof(float));
for(int x1782=0; x1782 < 150; x1782++) {
float x1783 = 0.0f;
for(int x1784=0; x1784 < 150; x1784++) {
int32_t x1785 = x1780;
float x1786 = x136[x1785];
float x1787 = x536[x1784];
float x1788 = x1786 * x1787;
x1783 += x1788;
x1780 += 1;

}
float x1793 = x1783;
x1781[x1782] = x1793;

}
float* x1797 = (float*)myMalloc(150 * sizeof(float));
for(int x1798=0; x1798 < 150; x1798++) {
x1797[x1798] = 0.0f;

}
float* x1802 = (float*)myMalloc(150 * sizeof(float));
for(int x1803=0; x1803 < 150; x1803++) {
float x1804 = x1758[x1803];
float x1805 = x1781[x1803];
float x1806 = x1804 + x1805;
x1802[x1803] = x1806;

}
float* x1810 = (float*)myMalloc(150 * sizeof(float));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0f;

}
float* x1815 = (float*)myMalloc(150 * sizeof(float));
for(int x1816=0; x1816 < 150; x1816++) {
float x1817 = x1802[x1816];
float x1818 = x144[x1816];
float x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
float* x1823 = (float*)myMalloc(150 * sizeof(float));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0f;

}
float* x1828 = (float*)myMalloc(150 * sizeof(float));
for(int x1829=0; x1829 < 150; x1829++) {
float x1830 = x1815[x1829];
float x1831 = -1.0f * x1830;
double x1832 = (double)x1831;
double x1833 = exp(x1832);
float x1834 = (float)x1833;
float x1835 = x1834 + 1.0f;
float x1836 = 1.0f / x1835;
x1828[x1829] = x1836;

}
float* x1840 = (float*)myMalloc(150 * sizeof(float));
for(int x1841=0; x1841 < 150; x1841++) {
x1840[x1841] = 0.0f;

}
float** x1845 = (float**)myMalloc(2 * sizeof(float*));
x1845[0] = x1828;
x1845[1] = x1840;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1845);
for(int x1849=0; x1849 < 150; x1849++) {
float x1850 = x1823[x1849];
float x1851 = x1828[x1849];
float x1854 = x1840[x1849];
float x1852 = 1.0f - x1851;
float x1853 = x1852 * x1851;
float x1855 = x1853 * x1854;
float x1856 = x1850 + x1855;
x1823[x1849] = x1856;

}
// backpropagate +
for(int x1861=0; x1861 < 150; x1861++) {
float x1862 = x1810[x1861];
float x1863 = x1823[x1861];
float x1864 = x1862 + x1863;
x1810[x1861] = x1864;

}
for(int x1868=0; x1868 < 150; x1868++) {
float x1869 = x271[x1868];
float x1870 = x1823[x1868];
float x1871 = x1869 + x1870;
x271[x1868] = x1871;

}
// backpropagate +
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1774[x1876];
float x1878 = x1810[x1876];
float x1879 = x1877 + x1878;
x1774[x1876] = x1879;

}
for(int x1883=0; x1883 < 150; x1883++) {
float x1884 = x1797[x1883];
float x1885 = x1810[x1883];
float x1886 = x1884 + x1885;
x1797[x1883] = x1886;

}
// add_cartesian
int32_t x1891 = 0;
for(int x1892=0; x1892 < 150; x1892++) {
for(int x1893=0; x1893 < 150; x1893++) {
int32_t x1894 = x1891;
int32_t x1895 = x1894 + x1893;
float x1896 = x266[x1895];
float x1897 = x536[x1893];
float x1898 = x1797[x1892];
float x1899 = x1897 * x1898;
float x1900 = x1896 + x1899;
x266[x1895] = x1900;

}
x1891 += 150;

}
int32_t x1907 = 0;
for(int x1908=0; x1908 < 150; x1908++) {
for(int x1909=0; x1909 < 150; x1909++) {
float x1910 = x537[x1909];
int32_t x1911 = x1907;
int32_t x1912 = x1911 + x1909;
float x1913 = x136[x1912];
float x1914 = x1797[x1908];
float x1915 = x1913 * x1914;
float x1916 = x1910 + x1915;
x537[x1909] = x1916;

}
x1907 += 150;

}
// add_cartesian
int32_t x1924 = 0;
for(int x1925=0; x1925 < 150; x1925++) {
for(int x1926=0; x1926 < 150; x1926++) {
int32_t x1927 = x1924;
int32_t x1928 = x1927 + x1926;
float x1929 = x261[x1928];
float x1930 = x527[x1926];
float x1931 = x1774[x1925];
float x1932 = x1930 * x1931;
float x1933 = x1929 + x1932;
x261[x1928] = x1933;

}
x1924 += 150;

}
int32_t x1940 = 0;
for(int x1941=0; x1941 < 150; x1941++) {
for(int x1942=0; x1942 < 150; x1942++) {
float x1943 = x528[x1942];
int32_t x1944 = x1940;
int32_t x1945 = x1944 + x1942;
float x1946 = x128[x1945];
float x1947 = x1774[x1941];
float x1948 = x1946 * x1947;
float x1949 = x1943 + x1948;
x528[x1942] = x1949;

}
x1940 += 150;

}
}
};
x566(x1959);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1965 = 0;
float* x1966 = (float*)myMalloc(150 * sizeof(float));
for(int x1967=0; x1967 < 150; x1967++) {
float x1968 = 0.0f;
for(int x1969=0; x1969 < 150; x1969++) {
int32_t x1970 = x1965;
float x1971 = x112[x1970];
float x1972 = x527[x1969];
float x1973 = x1971 * x1972;
x1968 += x1973;
x1965 += 1;

}
float x1978 = x1968;
x1966[x1967] = x1978;

}
float* x1982 = (float*)myMalloc(150 * sizeof(float));
for(int x1983=0; x1983 < 150; x1983++) {
x1982[x1983] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1988 = 0;
float* x1989 = (float*)myMalloc(150 * sizeof(float));
for(int x1990=0; x1990 < 150; x1990++) {
float x1991 = 0.0f;
for(int x1992=0; x1992 < 150; x1992++) {
int32_t x1993 = x1988;
float x1994 = x120[x1993];
float x1995 = x536[x1992];
float x1996 = x1994 * x1995;
x1991 += x1996;
x1988 += 1;

}
float x2001 = x1991;
x1989[x1990] = x2001;

}
float* x2005 = (float*)myMalloc(150 * sizeof(float));
for(int x2006=0; x2006 < 150; x2006++) {
x2005[x2006] = 0.0f;

}
float* x2010 = (float*)myMalloc(150 * sizeof(float));
for(int x2011=0; x2011 < 150; x2011++) {
float x2012 = x1966[x2011];
float x2013 = x1989[x2011];
float x2014 = x2012 + x2013;
x2010[x2011] = x2014;

}
float* x2018 = (float*)myMalloc(150 * sizeof(float));
for(int x2019=0; x2019 < 150; x2019++) {
x2018[x2019] = 0.0f;

}
float* x2023 = (float*)myMalloc(150 * sizeof(float));
for(int x2024=0; x2024 < 150; x2024++) {
float x2025 = x2010[x2024];
float x2026 = x144[x2024];
float x2027 = x2025 + x2026;
x2023[x2024] = x2027;

}
float* x2031 = (float*)myMalloc(150 * sizeof(float));
for(int x2032=0; x2032 < 150; x2032++) {
x2031[x2032] = 0.0f;

}
float* x2036 = (float*)myMalloc(150 * sizeof(float));
for(int x2037=0; x2037 < 150; x2037++) {
float x2038 = x2023[x2037];
float x2039 = -1.0f * x2038;
double x2040 = (double)x2039;
double x2041 = exp(x2040);
float x2042 = (float)x2041;
float x2043 = x2042 + 1.0f;
float x2044 = 1.0f / x2043;
x2036[x2037] = x2044;

}
float* x2048 = (float*)myMalloc(150 * sizeof(float));
for(int x2049=0; x2049 < 150; x2049++) {
x2048[x2049] = 0.0f;

}
float** x2053 = (float**)myMalloc(2 * sizeof(float*));
x2053[0] = x2036;
x2053[1] = x2048;
function<void(float**)> x566 = [&](float** x567) {
float* x568 = x567[0];
float* x569 = x567[1];
int32_t x570 = x459[x512];
bool x571 = x570 < 0;
if (x571) {
float** x1751 = (float**)myMalloc(2 * sizeof(float*));
x1751[0] = x326;
x1751[1] = x331;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1751);
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1757 = 0;
float* x1758 = (float*)myMalloc(150 * sizeof(float));
for(int x1759=0; x1759 < 150; x1759++) {
float x1760 = 0.0f;
for(int x1761=0; x1761 < 150; x1761++) {
int32_t x1762 = x1757;
float x1763 = x128[x1762];
float x1764 = x527[x1761];
float x1765 = x1763 * x1764;
x1760 += x1765;
x1757 += 1;

}
float x1770 = x1760;
x1758[x1759] = x1770;

}
float* x1774 = (float*)myMalloc(150 * sizeof(float));
for(int x1775=0; x1775 < 150; x1775++) {
x1774[x1775] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1780 = 0;
float* x1781 = (float*)myMalloc(150 * sizeof(float));
for(int x1782=0; x1782 < 150; x1782++) {
float x1783 = 0.0f;
for(int x1784=0; x1784 < 150; x1784++) {
int32_t x1785 = x1780;
float x1786 = x136[x1785];
float x1787 = x536[x1784];
float x1788 = x1786 * x1787;
x1783 += x1788;
x1780 += 1;

}
float x1793 = x1783;
x1781[x1782] = x1793;

}
float* x1797 = (float*)myMalloc(150 * sizeof(float));
for(int x1798=0; x1798 < 150; x1798++) {
x1797[x1798] = 0.0f;

}
float* x1802 = (float*)myMalloc(150 * sizeof(float));
for(int x1803=0; x1803 < 150; x1803++) {
float x1804 = x1758[x1803];
float x1805 = x1781[x1803];
float x1806 = x1804 + x1805;
x1802[x1803] = x1806;

}
float* x1810 = (float*)myMalloc(150 * sizeof(float));
for(int x1811=0; x1811 < 150; x1811++) {
x1810[x1811] = 0.0f;

}
float* x1815 = (float*)myMalloc(150 * sizeof(float));
for(int x1816=0; x1816 < 150; x1816++) {
float x1817 = x1802[x1816];
float x1818 = x144[x1816];
float x1819 = x1817 + x1818;
x1815[x1816] = x1819;

}
float* x1823 = (float*)myMalloc(150 * sizeof(float));
for(int x1824=0; x1824 < 150; x1824++) {
x1823[x1824] = 0.0f;

}
float* x1828 = (float*)myMalloc(150 * sizeof(float));
for(int x1829=0; x1829 < 150; x1829++) {
float x1830 = x1815[x1829];
float x1831 = -1.0f * x1830;
double x1832 = (double)x1831;
double x1833 = exp(x1832);
float x1834 = (float)x1833;
float x1835 = x1834 + 1.0f;
float x1836 = 1.0f / x1835;
x1828[x1829] = x1836;

}
float* x1840 = (float*)myMalloc(150 * sizeof(float));
for(int x1841=0; x1841 < 150; x1841++) {
x1840[x1841] = 0.0f;

}
float** x1845 = (float**)myMalloc(2 * sizeof(float*));
x1845[0] = x1828;
x1845[1] = x1840;
function<void(float**)> x572 = [&](float** x573) {
float* x574 = x573[0];
float* x575 = x573[1];
int32_t x576 = x459[x512];
bool x577 = x576 < 0;
if (x577) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1432 = 0;
float* x1433 = (float*)myMalloc(150 * sizeof(float));
for(int x1434=0; x1434 < 150; x1434++) {
float x1435 = 0.0f;
for(int x1436=0; x1436 < 300; x1436++) {
int32_t x1437 = x1432;
float x1438 = x64[x1437];
float x1439 = x556[x1436];
float x1440 = x1438 * x1439;
x1435 += x1440;
x1432 += 1;

}
float x1445 = x1435;
x1433[x1434] = x1445;

}
float* x1449 = (float*)myMalloc(150 * sizeof(float));
for(int x1450=0; x1450 < 150; x1450++) {
x1449[x1450] = 0.0f;

}
float* x1454 = (float*)myMalloc(150 * sizeof(float));
for(int x1455=0; x1455 < 150; x1455++) {
float x1456 = x1433[x1455];
float x1457 = x72[x1455];
float x1458 = x1456 + x1457;
x1454[x1455] = x1458;

}
float* x1462 = (float*)myMalloc(150 * sizeof(float));
for(int x1463=0; x1463 < 150; x1463++) {
x1462[x1463] = 0.0f;

}
float* x1467 = (float*)myMalloc(150 * sizeof(float));
for(int x1468=0; x1468 < 150; x1468++) {
float x1469 = x1454[x1468];
float x1470 = -1.0f * x1469;
double x1471 = (double)x1470;
double x1472 = exp(x1471);
float x1473 = (float)x1472;
float x1474 = x1473 + 1.0f;
float x1475 = 1.0f / x1474;
x1467[x1468] = x1475;

}
float* x1479 = (float*)myMalloc(150 * sizeof(float));
for(int x1480=0; x1480 < 150; x1480++) {
x1479[x1480] = 0.0f;

}
float** x1484 = (float**)myMalloc(2 * sizeof(float*));
x1484[0] = x1467;
x1484[1] = x1479;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1484);
for(int x1488=0; x1488 < 150; x1488++) {
float x1489 = x1462[x1488];
float x1490 = x1467[x1488];
float x1493 = x1479[x1488];
float x1491 = 1.0f - x1490;
float x1492 = x1491 * x1490;
float x1494 = x1492 * x1493;
float x1495 = x1489 + x1494;
x1462[x1488] = x1495;

}
// backpropagate +
for(int x1500=0; x1500 < 150; x1500++) {
float x1501 = x1449[x1500];
float x1502 = x1462[x1500];
float x1503 = x1501 + x1502;
x1449[x1500] = x1503;

}
for(int x1507=0; x1507 < 150; x1507++) {
float x1508 = x221[x1507];
float x1509 = x1462[x1507];
float x1510 = x1508 + x1509;
x221[x1507] = x1510;

}
// add_cartesian
int32_t x1515 = 0;
for(int x1516=0; x1516 < 150; x1516++) {
for(int x1517=0; x1517 < 300; x1517++) {
int32_t x1518 = x1515;
int32_t x1519 = x1518 + x1517;
float x1520 = x216[x1519];
float x1521 = x556[x1517];
float x1522 = x1449[x1516];
float x1523 = x1521 * x1522;
float x1524 = x1520 + x1523;
x216[x1519] = x1524;

}
x1515 += 300;

}
int32_t x1531 = 0;
for(int x1532=0; x1532 < 150; x1532++) {
for(int x1533=0; x1533 < 300; x1533++) {
float x1534 = x557[x1533];
int32_t x1535 = x1531;
int32_t x1536 = x1535 + x1533;
float x1537 = x64[x1536];
float x1538 = x1449[x1532];
float x1539 = x1537 * x1538;
float x1540 = x1534 + x1539;
x557[x1533] = x1540;

}
x1531 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1549 = 0;
float* x1550 = (float*)myMalloc(150 * sizeof(float));
for(int x1551=0; x1551 < 150; x1551++) {
float x1552 = 0.0f;
for(int x1553=0; x1553 < 150; x1553++) {
int32_t x1554 = x1549;
float x1555 = x149[x1554];
float x1556 = x527[x1553];
float x1557 = x1555 * x1556;
x1552 += x1557;
x1549 += 1;

}
float x1562 = x1552;
x1550[x1551] = x1562;

}
float* x1566 = (float*)myMalloc(150 * sizeof(float));
for(int x1567=0; x1567 < 150; x1567++) {
x1566[x1567] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1572 = 0;
float* x1573 = (float*)myMalloc(150 * sizeof(float));
for(int x1574=0; x1574 < 150; x1574++) {
float x1575 = 0.0f;
for(int x1576=0; x1576 < 150; x1576++) {
int32_t x1577 = x1572;
float x1578 = x157[x1577];
float x1579 = x536[x1576];
float x1580 = x1578 * x1579;
x1575 += x1580;
x1572 += 1;

}
float x1585 = x1575;
x1573[x1574] = x1585;

}
float* x1589 = (float*)myMalloc(150 * sizeof(float));
for(int x1590=0; x1590 < 150; x1590++) {
x1589[x1590] = 0.0f;

}
float* x1594 = (float*)myMalloc(150 * sizeof(float));
for(int x1595=0; x1595 < 150; x1595++) {
float x1596 = x1550[x1595];
float x1597 = x1573[x1595];
float x1598 = x1596 + x1597;
x1594[x1595] = x1598;

}
float* x1602 = (float*)myMalloc(150 * sizeof(float));
for(int x1603=0; x1603 < 150; x1603++) {
x1602[x1603] = 0.0f;

}
float* x1607 = (float*)myMalloc(150 * sizeof(float));
for(int x1608=0; x1608 < 150; x1608++) {
float x1609 = x1594[x1608];
float x1610 = x165[x1608];
float x1611 = x1609 + x1610;
x1607[x1608] = x1611;

}
float* x1615 = (float*)myMalloc(150 * sizeof(float));
for(int x1616=0; x1616 < 150; x1616++) {
x1615[x1616] = 0.0f;

}
float* x1620 = (float*)myMalloc(150 * sizeof(float));
for(int x1621=0; x1621 < 150; x1621++) {
float x1622 = x1607[x1621];
float x1623 = -1.0f * x1622;
double x1624 = (double)x1623;
double x1625 = exp(x1624);
float x1626 = (float)x1625;
float x1627 = x1626 + 1.0f;
float x1628 = 1.0f / x1627;
x1620[x1621] = x1628;

}
float* x1632 = (float*)myMalloc(150 * sizeof(float));
for(int x1633=0; x1633 < 150; x1633++) {
x1632[x1633] = 0.0f;

}
float** x1637 = (float**)myMalloc(2 * sizeof(float*));
x1637[0] = x1620;
x1637[1] = x1632;
function<void(float**)> x578 = [&](float** x579) {
float* x580 = x579[0];
float* x581 = x579[1];
int32_t x582 = x459[x512];
bool x583 = x582 < 0;
if (x583) {
// dot List(150, 300) - WrappedArray(300)
int32_t x1116 = 0;
float* x1117 = (float*)myMalloc(150 * sizeof(float));
for(int x1118=0; x1118 < 150; x1118++) {
float x1119 = 0.0f;
for(int x1120=0; x1120 < 300; x1120++) {
int32_t x1121 = x1116;
float x1122 = x77[x1121];
float x1123 = x556[x1120];
float x1124 = x1122 * x1123;
x1119 += x1124;
x1116 += 1;

}
float x1129 = x1119;
x1117[x1118] = x1129;

}
float* x1133 = (float*)myMalloc(150 * sizeof(float));
for(int x1134=0; x1134 < 150; x1134++) {
x1133[x1134] = 0.0f;

}
float* x1138 = (float*)myMalloc(150 * sizeof(float));
for(int x1139=0; x1139 < 150; x1139++) {
float x1140 = x1117[x1139];
float x1141 = x85[x1139];
float x1142 = x1140 + x1141;
x1138[x1139] = x1142;

}
float* x1146 = (float*)myMalloc(150 * sizeof(float));
for(int x1147=0; x1147 < 150; x1147++) {
x1146[x1147] = 0.0f;

}
float* x1151 = (float*)myMalloc(150 * sizeof(float));
for(int x1152=0; x1152 < 150; x1152++) {
float x1153 = x1138[x1152];
double x1154 = (double)x1153;
double x1155 = tanh(x1154);
float x1156 = (float)x1155;
x1151[x1152] = x1156;

}
float* x1160 = (float*)myMalloc(150 * sizeof(float));
for(int x1161=0; x1161 < 150; x1161++) {
x1160[x1161] = 0.0f;

}
float** x1165 = (float**)myMalloc(2 * sizeof(float*));
x1165[0] = x1151;
x1165[1] = x1160;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1165);
// backpropagate tanh
for(int x1170=0; x1170 < 150; x1170++) {
float x1171 = x1146[x1170];
float x1172 = x1151[x1170];
float x1175 = x1160[x1170];
float x1173 = x1172 * x1172;
float x1174 = 1.0f - x1173;
float x1176 = x1174 * x1175;
float x1177 = x1171 + x1176;
x1146[x1170] = x1177;

}
// backpropagate +
for(int x1182=0; x1182 < 150; x1182++) {
float x1183 = x1133[x1182];
float x1184 = x1146[x1182];
float x1185 = x1183 + x1184;
x1133[x1182] = x1185;

}
for(int x1189=0; x1189 < 150; x1189++) {
float x1190 = x231[x1189];
float x1191 = x1146[x1189];
float x1192 = x1190 + x1191;
x231[x1189] = x1192;

}
// add_cartesian
int32_t x1197 = 0;
for(int x1198=0; x1198 < 150; x1198++) {
for(int x1199=0; x1199 < 300; x1199++) {
int32_t x1200 = x1197;
int32_t x1201 = x1200 + x1199;
float x1202 = x226[x1201];
float x1203 = x556[x1199];
float x1204 = x1133[x1198];
float x1205 = x1203 * x1204;
float x1206 = x1202 + x1205;
x226[x1201] = x1206;

}
x1197 += 300;

}
int32_t x1213 = 0;
for(int x1214=0; x1214 < 150; x1214++) {
for(int x1215=0; x1215 < 300; x1215++) {
float x1216 = x557[x1215];
int32_t x1217 = x1213;
int32_t x1218 = x1217 + x1215;
float x1219 = x77[x1218];
float x1220 = x1133[x1214];
float x1221 = x1219 * x1220;
float x1222 = x1216 + x1221;
x557[x1215] = x1222;

}
x1213 += 300;

}
} else {
// dot List(150, 150) - WrappedArray(150)
int32_t x1231 = 0;
float* x1232 = (float*)myMalloc(150 * sizeof(float));
for(int x1233=0; x1233 < 150; x1233++) {
float x1234 = 0.0f;
for(int x1235=0; x1235 < 150; x1235++) {
int32_t x1236 = x1231;
float x1237 = x170[x1236];
float x1238 = x527[x1235];
float x1239 = x1237 * x1238;
x1234 += x1239;
x1231 += 1;

}
float x1244 = x1234;
x1232[x1233] = x1244;

}
float* x1248 = (float*)myMalloc(150 * sizeof(float));
for(int x1249=0; x1249 < 150; x1249++) {
x1248[x1249] = 0.0f;

}
// dot List(150, 150) - WrappedArray(150)
int32_t x1254 = 0;
float* x1255 = (float*)myMalloc(150 * sizeof(float));
for(int x1256=0; x1256 < 150; x1256++) {
float x1257 = 0.0f;
for(int x1258=0; x1258 < 150; x1258++) {
int32_t x1259 = x1254;
float x1260 = x178[x1259];
float x1261 = x536[x1258];
float x1262 = x1260 * x1261;
x1257 += x1262;
x1254 += 1;

}
float x1267 = x1257;
x1255[x1256] = x1267;

}
float* x1271 = (float*)myMalloc(150 * sizeof(float));
for(int x1272=0; x1272 < 150; x1272++) {
x1271[x1272] = 0.0f;

}
float* x1276 = (float*)myMalloc(150 * sizeof(float));
for(int x1277=0; x1277 < 150; x1277++) {
float x1278 = x1232[x1277];
float x1279 = x1255[x1277];
float x1280 = x1278 + x1279;
x1276[x1277] = x1280;

}
float* x1284 = (float*)myMalloc(150 * sizeof(float));
for(int x1285=0; x1285 < 150; x1285++) {
x1284[x1285] = 0.0f;

}
float* x1289 = (float*)myMalloc(150 * sizeof(float));
for(int x1290=0; x1290 < 150; x1290++) {
float x1291 = x1276[x1290];
float x1292 = x186[x1290];
float x1293 = x1291 + x1292;
x1289[x1290] = x1293;

}
float* x1297 = (float*)myMalloc(150 * sizeof(float));
for(int x1298=0; x1298 < 150; x1298++) {
x1297[x1298] = 0.0f;

}
float* x1302 = (float*)myMalloc(150 * sizeof(float));
for(int x1303=0; x1303 < 150; x1303++) {
float x1304 = x1289[x1303];
double x1305 = (double)x1304;
double x1306 = tanh(x1305);
float x1307 = (float)x1306;
x1302[x1303] = x1307;

}
float* x1311 = (float*)myMalloc(150 * sizeof(float));
for(int x1312=0; x1312 < 150; x1312++) {
x1311[x1312] = 0.0f;

}
float** x1316 = (float**)myMalloc(2 * sizeof(float*));
x1316[0] = x1302;
x1316[1] = x1311;
function<void(float**)> x590 = [&](float** x591) {
float* x592 = x591[0];
float* x593 = x591[1];
float* x594 = (float*)myMalloc(150 * sizeof(float));
for(int x595=0; x595 < 150; x595++) {
float x596 = x592[x595];
double x597 = (double)x596;
double x598 = tanh(x597);
float x599 = (float)x598;
x594[x595] = x599;

}
float* x603 = (float*)myMalloc(150 * sizeof(float));
for(int x604=0; x604 < 150; x604++) {
x603[x604] = 0.0f;

}
float* x608 = (float*)myMalloc(150 * sizeof(float));
for(int x609=0; x609 < 150; x609++) {
float x610 = x580[x609];
float x611 = x594[x609];
float x612 = x610 * x611;
x608[x609] = x612;

}
float* x616 = (float*)myMalloc(150 * sizeof(float));
for(int x617=0; x617 < 150; x617++) {
x616[x617] = 0.0f;

}
// dot List(5, 150) - WrappedArray(150)
int32_t x622 = 0;
float* x623 = (float*)myMalloc(5 * sizeof(float));
for(int x624=0; x624 < 5; x624++) {
float x625 = 0.0f;
for(int x626=0; x626 < 150; x626++) {
int32_t x627 = x622;
float x628 = x191[x627];
float x629 = x608[x626];
float x630 = x628 * x629;
x625 += x630;
x622 += 1;

}
float x635 = x625;
x623[x624] = x635;

}
float* x639 = (float*)myMalloc(5 * sizeof(float));
for(int x640=0; x640 < 5; x640++) {
x639[x640] = 0.0f;

}
float* x644 = (float*)myMalloc(5 * sizeof(float));
for(int x645=0; x645 < 5; x645++) {
float x646 = x623[x645];
float x647 = x200[x645];
float x648 = x646 + x647;
x644[x645] = x648;

}
float* x652 = (float*)myMalloc(5 * sizeof(float));
for(int x653=0; x653 < 5; x653++) {
x652[x653] = 0.0f;

}
float* x657 = (float*)myMalloc(5 * sizeof(float));
for(int x658=0; x658 < 5; x658++) {
float x659 = x644[x658];
double x660 = (double)x659;
double x661 = exp(x660);
float x662 = (float)x661;
x657[x658] = x662;

}
float* x666 = (float*)myMalloc(5 * sizeof(float));
for(int x667=0; x667 < 5; x667++) {
x666[x667] = 0.0f;

}
float x671 = 0.0f;
for(int x672=0; x672 < 5; x672++) {
float x673 = x671;
float x674 = x657[x672];
float x675 = x673 + x674;
x671 = x675;

}
float x679 = x671;
float* x680 = (float*)myMalloc(1 * sizeof(float));
x680[0] = x679;
float* x682 = (float*)myMalloc(1 * sizeof(float));
for(int x683=0; x683 < 1; x683++) {
x682[x683] = 0.0f;

}
float x687 = x680[0];
float* x688 = (float*)myMalloc(5 * sizeof(float));
for(int x689=0; x689 < 5; x689++) {
float x690 = x657[x689];
float x691 = x690 / x687;
x688[x689] = x691;

}
float* x695 = (float*)myMalloc(5 * sizeof(float));
for(int x696=0; x696 < 5; x696++) {
x695[x696] = 0.0f;

}
float x700 = x525[0];
float* x701 = (float*)myMalloc(1 * sizeof(float));
float x702 = x534[0];
float x703 = x702 + x700;
x701[0] = x703;
float* x705 = (float*)myMalloc(1 * sizeof(float));
for(int x706=0; x706 < 1; x706++) {
x705[x706] = 0.0f;

}
// dot WrappedArray(5) - WrappedArray(5)
int32_t x711 = 0;
float* x712 = (float*)myMalloc(1 * sizeof(float));
float x713 = 0.0f;
for(int x714=0; x714 < 5; x714++) {
int32_t x715 = x711;
float x716 = x688[x715];
float x717 = x540[x714];
float x718 = x716 * x717;
x713 += x718;
x711 += 1;

}
float x723 = x713;
x712[0] = x723;
float* x725 = (float*)myMalloc(1 * sizeof(float));
for(int x726=0; x726 < 1; x726++) {
x725[x726] = 0.0f;

}
float* x730 = (float*)myMalloc(1 * sizeof(float));
float x731 = x712[0];
double x732 = (double)x731;
double x733 = log(x732);
float x734 = (float)x733;
x730[0] = x734;
float* x736 = (float*)myMalloc(1 * sizeof(float));
for(int x737=0; x737 < 1; x737++) {
x736[x737] = 0.0f;

}
float* x741 = (float*)myMalloc(1 * sizeof(float));
float x742 = x730[0];
float x743 = x701[0];
float x744 = x743 - x742;
x741[0] = x744;
float* x746 = (float*)myMalloc(1 * sizeof(float));
for(int x747=0; x747 < 1; x747++) {
x746[x747] = 0.0f;

}
float** x751 = (float**)myMalloc(6 * sizeof(float*));
x751[0] = x741;
x751[1] = x746;
x751[2] = x608;
x751[3] = x616;
x751[4] = x592;
x751[5] = x593;
x513(x751);
// += tensor of dim 0
float x760 = x746[0];
float x761 = x705[0];
float x762 = x761 + x760;
x705[0] = x762;
float x764 = x746[0];
float x765 = x736[0];
float x766 = x765 - x764;
x736[0] = x766;
float x768 = x725[0];
float x769 = x736[0];
float x770 = x712[0];
float x771 = x769 / x770;
float x772 = x768 + x771;
x725[0] = x772;
float x774 = x725[0];
// Generate code for addMul
for(int x776=0; x776 < 5; x776++) {
float x777 = x695[x776];
float x778 = x540[x776];
float x779 = x774 * x778;
float x780 = x777 + x779;
x695[x776] = x780;

}
float x784 = x725[0];
// Generate code for addMul
for(int x786=0; x786 < 5; x786++) {
float x787 = x547[x786];
float x788 = x688[x786];
float x789 = x784 * x788;
float x790 = x787 + x789;
x547[x786] = x790;

}
// backpropagate +
// += tensor of dim 0
float x796 = x705[0];
float x797 = x526[0];
float x798 = x797 + x796;
x526[0] = x798;
// += tensor of dim 0
float x801 = x705[0];
float x802 = x535[0];
float x803 = x802 + x801;
x535[0] = x803;
for(int x805=0; x805 < 5; x805++) {
float x806 = x666[x805];
float x807 = x695[x805];
float x808 = x680[0];
float x809 = x807 / x808;
float x810 = x806 + x809;
x666[x805] = x810;

}
for(int x814=0; x814 < 5; x814++) {
float x815 = x682[0];
float x816 = x657[x814];
float x817 = x695[x814];
float x819 = x680[0];
float x818 = x816 * x817;
float x820 = x819 * x819;
float x821 = x818 / x820;
float x822 = x815 - x821;
x682[0] = x822;

}
// += tensor of dim 0
float x827 = x682[0];
for(int x828=0; x828 < 5; x828++) {
float x829 = x666[x828];
float x830 = x829 + x827;
x666[x828] = x830;

}
// backpropage exp
for(int x835=0; x835 < 5; x835++) {
float x836 = x652[x835];
float x837 = x657[x835];
float x838 = x666[x835];
float x839 = x837 * x838;
float x840 = x836 + x839;
x652[x835] = x840;

}
// backpropagate +
for(int x845=0; x845 < 5; x845++) {
float x846 = x639[x845];
float x847 = x652[x845];
float x848 = x846 + x847;
x639[x845] = x848;

}
for(int x852=0; x852 < 5; x852++) {
float x853 = x311[x852];
float x854 = x652[x852];
float x855 = x853 + x854;
x311[x852] = x855;

}
// add_cartesian
int32_t x860 = 0;
for(int x861=0; x861 < 5; x861++) {
for(int x862=0; x862 < 150; x862++) {
int32_t x863 = x860;
int32_t x864 = x863 + x862;
float x865 = x306[x864];
float x866 = x608[x862];
float x867 = x639[x861];
float x868 = x866 * x867;
float x869 = x865 + x868;
x306[x864] = x869;

}
x860 += 150;

}
int32_t x876 = 0;
for(int x877=0; x877 < 5; x877++) {
for(int x878=0; x878 < 150; x878++) {
float x879 = x616[x878];
int32_t x880 = x876;
int32_t x881 = x880 + x878;
float x882 = x191[x881];
float x883 = x639[x877];
float x884 = x882 * x883;
float x885 = x879 + x884;
x616[x878] = x885;

}
x876 += 150;

}
for(int x892=0; x892 < 150; x892++) {
float x893 = x581[x892];
float x894 = x594[x892];
float x895 = x616[x892];
float x896 = x894 * x895;
float x897 = x893 + x896;
x581[x892] = x897;

}
for(int x901=0; x901 < 150; x901++) {
float x902 = x603[x901];
float x903 = x580[x901];
float x904 = x616[x901];
float x905 = x903 * x904;
float x906 = x902 + x905;
x603[x901] = x906;

}
// backpropagate tanh
for(int x911=0; x911 < 150; x911++) {
float x912 = x593[x911];
float x913 = x594[x911];
float x916 = x603[x911];
float x914 = x913 * x913;
float x915 = 1.0f - x914;
float x917 = x915 * x916;
float x918 = x912 + x917;
x593[x911] = x918;

}
};
function<void(float**)> x584 = [&](float** x585) {
float* x586 = x585[0];
float* x587 = x585[1];
int32_t x588 = x459[x512];
bool x589 = x588 < 0;
if (x589) {
float* x923 = (float*)myMalloc(150 * sizeof(float));
for(int x924=0; x924 < 150; x924++) {
float x925 = x562[x924];
float x926 = x586[x924];
float x927 = x925 * x926;
x923[x924] = x927;

}
float* x931 = (float*)myMalloc(150 * sizeof(float));
for(int x932=0; x932 < 150; x932++) {
x931[x932] = 0.0f;

}
float** x936 = (float**)myMalloc(2 * sizeof(float*));
x936[0] = x923;
x936[1] = x931;
x590(x936);
for(int x940=0; x940 < 150; x940++) {
float x941 = x563[x940];
float x942 = x586[x940];
float x943 = x931[x940];
float x944 = x942 * x943;
float x945 = x941 + x944;
x563[x940] = x945;

}
for(int x949=0; x949 < 150; x949++) {
float x950 = x587[x949];
float x951 = x562[x949];
float x952 = x931[x949];
float x953 = x951 * x952;
float x954 = x950 + x953;
x587[x949] = x954;

}
} else {
float* x959 = (float*)myMalloc(150 * sizeof(float));
for(int x960=0; x960 < 150; x960++) {
float x961 = x562[x960];
float x962 = x586[x960];
float x963 = x961 * x962;
x959[x960] = x963;

}
float* x967 = (float*)myMalloc(150 * sizeof(float));
for(int x968=0; x968 < 150; x968++) {
x967[x968] = 0.0f;

}
float* x972 = (float*)myMalloc(150 * sizeof(float));
for(int x973=0; x973 < 150; x973++) {
float x974 = x568[x973];
float x975 = x529[x973];
float x976 = x974 * x975;
x972[x973] = x976;

}
float* x980 = (float*)myMalloc(150 * sizeof(float));
for(int x981=0; x981 < 150; x981++) {
x980[x981] = 0.0f;

}
float* x985 = (float*)myMalloc(150 * sizeof(float));
for(int x986=0; x986 < 150; x986++) {
float x987 = x959[x986];
float x988 = x972[x986];
float x989 = x987 + x988;
x985[x986] = x989;

}
float* x993 = (float*)myMalloc(150 * sizeof(float));
for(int x994=0; x994 < 150; x994++) {
x993[x994] = 0.0f;

}
float* x998 = (float*)myMalloc(150 * sizeof(float));
for(int x999=0; x999 < 150; x999++) {
float x1000 = x574[x999];
float x1001 = x538[x999];
float x1002 = x1000 * x1001;
x998[x999] = x1002;

}
float* x1006 = (float*)myMalloc(150 * sizeof(float));
for(int x1007=0; x1007 < 150; x1007++) {
x1006[x1007] = 0.0f;

}
float* x1011 = (float*)myMalloc(150 * sizeof(float));
for(int x1012=0; x1012 < 150; x1012++) {
float x1013 = x985[x1012];
float x1014 = x998[x1012];
float x1015 = x1013 + x1014;
x1011[x1012] = x1015;

}
float* x1019 = (float*)myMalloc(150 * sizeof(float));
for(int x1020=0; x1020 < 150; x1020++) {
x1019[x1020] = 0.0f;

}
float** x1024 = (float**)myMalloc(2 * sizeof(float*));
x1024[0] = x1011;
x1024[1] = x1019;
x590(x1024);
// backpropagate +
for(int x1029=0; x1029 < 150; x1029++) {
float x1030 = x993[x1029];
float x1031 = x1019[x1029];
float x1032 = x1030 + x1031;
x993[x1029] = x1032;

}
for(int x1036=0; x1036 < 150; x1036++) {
float x1037 = x1006[x1036];
float x1038 = x1019[x1036];
float x1039 = x1037 + x1038;
x1006[x1036] = x1039;

}
for(int x1043=0; x1043 < 150; x1043++) {
float x1044 = x575[x1043];
float x1045 = x538[x1043];
float x1046 = x1006[x1043];
float x1047 = x1045 * x1046;
float x1048 = x1044 + x1047;
x575[x1043] = x1048;

}
for(int x1052=0; x1052 < 150; x1052++) {
float x1053 = x539[x1052];
float x1054 = x574[x1052];
float x1055 = x1006[x1052];
float x1056 = x1054 * x1055;
float x1057 = x1053 + x1056;
x539[x1052] = x1057;

}
// backpropagate +
for(int x1062=0; x1062 < 150; x1062++) {
float x1063 = x967[x1062];
float x1064 = x993[x1062];
float x1065 = x1063 + x1064;
x967[x1062] = x1065;

}
for(int x1069=0; x1069 < 150; x1069++) {
float x1070 = x980[x1069];
float x1071 = x993[x1069];
float x1072 = x1070 + x1071;
x980[x1069] = x1072;

}
for(int x1076=0; x1076 < 150; x1076++) {
float x1077 = x569[x1076];
float x1078 = x529[x1076];
float x1079 = x980[x1076];
float x1080 = x1078 * x1079;
float x1081 = x1077 + x1080;
x569[x1076] = x1081;

}
for(int x1085=0; x1085 < 150; x1085++) {
float x1086 = x530[x1085];
float x1087 = x568[x1085];
float x1088 = x980[x1085];
float x1089 = x1087 * x1088;
float x1090 = x1086 + x1089;
x530[x1085] = x1090;

}
for(int x1094=0; x1094 < 150; x1094++) {
float x1095 = x563[x1094];
float x1096 = x586[x1094];
float x1097 = x967[x1094];
float x1098 = x1096 * x1097;
float x1099 = x1095 + x1098;
x563[x1094] = x1099;

}
for(int x1103=0; x1103 < 150; x1103++) {
float x1104 = x587[x1103];
float x1105 = x562[x1103];
float x1106 = x967[x1103];
float x1107 = x1105 * x1106;
float x1108 = x1104 + x1107;
x587[x1103] = x1108;

}
}
};
x584(x1316);
// backpropagate tanh
for(int x1321=0; x1321 < 150; x1321++) {
float x1322 = x1297[x1321];
float x1323 = x1302[x1321];
float x1326 = x1311[x1321];
float x1324 = x1323 * x1323;
float x1325 = 1.0f - x1324;
float x1327 = x1325 * x1326;
float x1328 = x1322 + x1327;
x1297[x1321] = x1328;

}
// backpropagate +
for(int x1333=0; x1333 < 150; x1333++) {
float x1334 = x1284[x1333];
float x1335 = x1297[x1333];
float x1336 = x1334 + x1335;
x1284[x1333] = x1336;

}
for(int x1340=0; x1340 < 150; x1340++) {
float x1341 = x301[x1340];
float x1342 = x1297[x1340];
float x1343 = x1341 + x1342;
x301[x1340] = x1343;

}
// backpropagate +
for(int x1348=0; x1348 < 150; x1348++) {
float x1349 = x1248[x1348];
float x1350 = x1284[x1348];
float x1351 = x1349 + x1350;
x1248[x1348] = x1351;

}
for(int x1355=0; x1355 < 150; x1355++) {
float x1356 = x1271[x1355];
float x1357 = x1284[x1355];
float x1358 = x1356 + x1357;
x1271[x1355] = x1358;

}
// add_cartesian
int32_t x1363 = 0;
for(int x1364=0; x1364 < 150; x1364++) {
for(int x1365=0; x1365 < 150; x1365++) {
int32_t x1366 = x1363;
int32_t x1367 = x1366 + x1365;
float x1368 = x296[x1367];
float x1369 = x536[x1365];
float x1370 = x1271[x1364];
float x1371 = x1369 * x1370;
float x1372 = x1368 + x1371;
x296[x1367] = x1372;

}
x1363 += 150;

}
int32_t x1379 = 0;
for(int x1380=0; x1380 < 150; x1380++) {
for(int x1381=0; x1381 < 150; x1381++) {
float x1382 = x537[x1381];
int32_t x1383 = x1379;
int32_t x1384 = x1383 + x1381;
float x1385 = x178[x1384];
float x1386 = x1271[x1380];
float x1387 = x1385 * x1386;
float x1388 = x1382 + x1387;
x537[x1381] = x1388;

}
x1379 += 150;

}
// add_cartesian
int32_t x1396 = 0;
for(int x1397=0; x1397 < 150; x1397++) {
for(int x1398=0; x1398 < 150; x1398++) {
int32_t x1399 = x1396;
int32_t x1400 = x1399 + x1398;
float x1401 = x291[x1400];
float x1402 = x527[x1398];
float x1403 = x1248[x1397];
float x1404 = x1402 * x1403;
float x1405 = x1401 + x1404;
x291[x1400] = x1405;

}
x1396 += 150;

}
int32_t x1412 = 0;
for(int x1413=0; x1413 < 150; x1413++) {
for(int x1414=0; x1414 < 150; x1414++) {
float x1415 = x528[x1414];
int32_t x1416 = x1412;
int32_t x1417 = x1416 + x1414;
float x1418 = x170[x1417];
float x1419 = x1248[x1413];
float x1420 = x1418 * x1419;
float x1421 = x1415 + x1420;
x528[x1414] = x1421;

}
x1412 += 150;

}
}
};
x578(x1637);
for(int x1641=0; x1641 < 150; x1641++) {
float x1642 = x1615[x1641];
float x1643 = x1620[x1641];
float x1646 = x1632[x1641];
float x1644 = 1.0f - x1643;
float x1645 = x1644 * x1643;
float x1647 = x1645 * x1646;
float x1648 = x1642 + x1647;
x1615[x1641] = x1648;

}
// backpropagate +
for(int x1653=0; x1653 < 150; x1653++) {
float x1654 = x1602[x1653];
float x1655 = x1615[x1653];
float x1656 = x1654 + x1655;
x1602[x1653] = x1656;

}
for(int x1660=0; x1660 < 150; x1660++) {
float x1661 = x286[x1660];
float x1662 = x1615[x1660];
float x1663 = x1661 + x1662;
x286[x1660] = x1663;

}
// backpropagate +
for(int x1668=0; x1668 < 150; x1668++) {
float x1669 = x1566[x1668];
float x1670 = x1602[x1668];
float x1671 = x1669 + x1670;
x1566[x1668] = x1671;

}
for(int x1675=0; x1675 < 150; x1675++) {
float x1676 = x1589[x1675];
float x1677 = x1602[x1675];
float x1678 = x1676 + x1677;
x1589[x1675] = x1678;

}
// add_cartesian
int32_t x1683 = 0;
for(int x1684=0; x1684 < 150; x1684++) {
for(int x1685=0; x1685 < 150; x1685++) {
int32_t x1686 = x1683;
int32_t x1687 = x1686 + x1685;
float x1688 = x281[x1687];
float x1689 = x536[x1685];
float x1690 = x1589[x1684];
float x1691 = x1689 * x1690;
float x1692 = x1688 + x1691;
x281[x1687] = x1692;

}
x1683 += 150;

}
int32_t x1699 = 0;
for(int x1700=0; x1700 < 150; x1700++) {
for(int x1701=0; x1701 < 150; x1701++) {
float x1702 = x537[x1701];
int32_t x1703 = x1699;
int32_t x1704 = x1703 + x1701;
float x1705 = x157[x1704];
float x1706 = x1589[x1700];
float x1707 = x1705 * x1706;
float x1708 = x1702 + x1707;
x537[x1701] = x1708;

}
x1699 += 150;

}
// add_cartesian
int32_t x1716 = 0;
for(int x1717=0; x1717 < 150; x1717++) {
for(int x1718=0; x1718 < 150; x1718++) {
int32_t x1719 = x1716;
int32_t x1720 = x1719 + x1718;
float x1721 = x276[x1720];
float x1722 = x527[x1718];
float x1723 = x1566[x1717];
float x1724 = x1722 * x1723;
float x1725 = x1721 + x1724;
x276[x1720] = x1725;

}
x1716 += 150;

}
int32_t x1732 = 0;
for(int x1733=0; x1733 < 150; x1733++) {
for(int x1734=0; x1734 < 150; x1734++) {
float x1735 = x528[x1734];
int32_t x1736 = x1732;
int32_t x1737 = x1736 + x1734;
float x1738 = x149[x1737];
float x1739 = x1566[x1733];
float x1740 = x1738 * x1739;
float x1741 = x1735 + x1740;
x528[x1734] = x1741;

}
x1732 += 150;

}
}
};
x572(x1845);
for(int x1849=0; x1849 < 150; x1849++) {
float x1850 = x1823[x1849];
float x1851 = x1828[x1849];
float x1854 = x1840[x1849];
float x1852 = 1.0f - x1851;
float x1853 = x1852 * x1851;
float x1855 = x1853 * x1854;
float x1856 = x1850 + x1855;
x1823[x1849] = x1856;

}
// backpropagate +
for(int x1861=0; x1861 < 150; x1861++) {
float x1862 = x1810[x1861];
float x1863 = x1823[x1861];
float x1864 = x1862 + x1863;
x1810[x1861] = x1864;

}
for(int x1868=0; x1868 < 150; x1868++) {
float x1869 = x271[x1868];
float x1870 = x1823[x1868];
float x1871 = x1869 + x1870;
x271[x1868] = x1871;

}
// backpropagate +
for(int x1876=0; x1876 < 150; x1876++) {
float x1877 = x1774[x1876];
float x1878 = x1810[x1876];
float x1879 = x1877 + x1878;
x1774[x1876] = x1879;

}
for(int x1883=0; x1883 < 150; x1883++) {
float x1884 = x1797[x1883];
float x1885 = x1810[x1883];
float x1886 = x1884 + x1885;
x1797[x1883] = x1886;

}
// add_cartesian
int32_t x1891 = 0;
for(int x1892=0; x1892 < 150; x1892++) {
for(int x1893=0; x1893 < 150; x1893++) {
int32_t x1894 = x1891;
int32_t x1895 = x1894 + x1893;
float x1896 = x266[x1895];
float x1897 = x536[x1893];
float x1898 = x1797[x1892];
float x1899 = x1897 * x1898;
float x1900 = x1896 + x1899;
x266[x1895] = x1900;

}
x1891 += 150;

}
int32_t x1907 = 0;
for(int x1908=0; x1908 < 150; x1908++) {
for(int x1909=0; x1909 < 150; x1909++) {
float x1910 = x537[x1909];
int32_t x1911 = x1907;
int32_t x1912 = x1911 + x1909;
float x1913 = x136[x1912];
float x1914 = x1797[x1908];
float x1915 = x1913 * x1914;
float x1916 = x1910 + x1915;
x537[x1909] = x1916;

}
x1907 += 150;

}
// add_cartesian
int32_t x1924 = 0;
for(int x1925=0; x1925 < 150; x1925++) {
for(int x1926=0; x1926 < 150; x1926++) {
int32_t x1927 = x1924;
int32_t x1928 = x1927 + x1926;
float x1929 = x261[x1928];
float x1930 = x527[x1926];
float x1931 = x1774[x1925];
float x1932 = x1930 * x1931;
float x1933 = x1929 + x1932;
x261[x1928] = x1933;

}
x1924 += 150;

}
int32_t x1940 = 0;
for(int x1941=0; x1941 < 150; x1941++) {
for(int x1942=0; x1942 < 150; x1942++) {
float x1943 = x528[x1942];
int32_t x1944 = x1940;
int32_t x1945 = x1944 + x1942;
float x1946 = x128[x1945];
float x1947 = x1774[x1941];
float x1948 = x1946 * x1947;
float x1949 = x1943 + x1948;
x528[x1942] = x1949;

}
x1940 += 150;

}
}
};
x566(x2053);
for(int x2057=0; x2057 < 150; x2057++) {
float x2058 = x2031[x2057];
float x2059 = x2036[x2057];
float x2062 = x2048[x2057];
float x2060 = 1.0f - x2059;
float x2061 = x2060 * x2059;
float x2063 = x2061 * x2062;
float x2064 = x2058 + x2063;
x2031[x2057] = x2064;

}
// backpropagate +
for(int x2069=0; x2069 < 150; x2069++) {
float x2070 = x2018[x2069];
float x2071 = x2031[x2069];
float x2072 = x2070 + x2071;
x2018[x2069] = x2072;

}
for(int x2076=0; x2076 < 150; x2076++) {
float x2077 = x271[x2076];
float x2078 = x2031[x2076];
float x2079 = x2077 + x2078;
x271[x2076] = x2079;

}
// backpropagate +
for(int x2084=0; x2084 < 150; x2084++) {
float x2085 = x1982[x2084];
float x2086 = x2018[x2084];
float x2087 = x2085 + x2086;
x1982[x2084] = x2087;

}
for(int x2091=0; x2091 < 150; x2091++) {
float x2092 = x2005[x2091];
float x2093 = x2018[x2091];
float x2094 = x2092 + x2093;
x2005[x2091] = x2094;

}
// add_cartesian
int32_t x2099 = 0;
for(int x2100=0; x2100 < 150; x2100++) {
for(int x2101=0; x2101 < 150; x2101++) {
int32_t x2102 = x2099;
int32_t x2103 = x2102 + x2101;
float x2104 = x256[x2103];
float x2105 = x536[x2101];
float x2106 = x2005[x2100];
float x2107 = x2105 * x2106;
float x2108 = x2104 + x2107;
x256[x2103] = x2108;

}
x2099 += 150;

}
int32_t x2115 = 0;
for(int x2116=0; x2116 < 150; x2116++) {
for(int x2117=0; x2117 < 150; x2117++) {
float x2118 = x537[x2117];
int32_t x2119 = x2115;
int32_t x2120 = x2119 + x2117;
float x2121 = x120[x2120];
float x2122 = x2005[x2116];
float x2123 = x2121 * x2122;
float x2124 = x2118 + x2123;
x537[x2117] = x2124;

}
x2115 += 150;

}
// add_cartesian
int32_t x2132 = 0;
for(int x2133=0; x2133 < 150; x2133++) {
for(int x2134=0; x2134 < 150; x2134++) {
int32_t x2135 = x2132;
int32_t x2136 = x2135 + x2134;
float x2137 = x251[x2136];
float x2138 = x527[x2134];
float x2139 = x1982[x2133];
float x2140 = x2138 * x2139;
float x2141 = x2137 + x2140;
x251[x2136] = x2141;

}
x2132 += 150;

}
int32_t x2148 = 0;
for(int x2149=0; x2149 < 150; x2149++) {
for(int x2150=0; x2150 < 150; x2150++) {
float x2151 = x528[x2150];
int32_t x2152 = x2148;
int32_t x2153 = x2152 + x2150;
float x2154 = x112[x2153];
float x2155 = x1982[x2149];
float x2156 = x2154 * x2155;
float x2157 = x2151 + x2156;
x528[x2150] = x2157;

}
x2148 += 150;

}
}
};
x560(x2373);
for(int x2377=0; x2377 < 150; x2377++) {
float x2378 = x2351[x2377];
float x2379 = x2356[x2377];
float x2382 = x2368[x2377];
float x2380 = 1.0f - x2379;
float x2381 = x2380 * x2379;
float x2383 = x2381 * x2382;
float x2384 = x2378 + x2383;
x2351[x2377] = x2384;

}
// backpropagate +
for(int x2389=0; x2389 < 150; x2389++) {
float x2390 = x2338[x2389];
float x2391 = x2351[x2389];
float x2392 = x2390 + x2391;
x2338[x2389] = x2392;

}
for(int x2396=0; x2396 < 150; x2396++) {
float x2397 = x246[x2396];
float x2398 = x2351[x2396];
float x2399 = x2397 + x2398;
x246[x2396] = x2399;

}
// backpropagate +
for(int x2404=0; x2404 < 150; x2404++) {
float x2405 = x2302[x2404];
float x2406 = x2338[x2404];
float x2407 = x2405 + x2406;
x2302[x2404] = x2407;

}
for(int x2411=0; x2411 < 150; x2411++) {
float x2412 = x2325[x2411];
float x2413 = x2338[x2411];
float x2414 = x2412 + x2413;
x2325[x2411] = x2414;

}
// add_cartesian
int32_t x2419 = 0;
for(int x2420=0; x2420 < 150; x2420++) {
for(int x2421=0; x2421 < 150; x2421++) {
int32_t x2422 = x2419;
int32_t x2423 = x2422 + x2421;
float x2424 = x241[x2423];
float x2425 = x536[x2421];
float x2426 = x2325[x2420];
float x2427 = x2425 * x2426;
float x2428 = x2424 + x2427;
x241[x2423] = x2428;

}
x2419 += 150;

}
int32_t x2435 = 0;
for(int x2436=0; x2436 < 150; x2436++) {
for(int x2437=0; x2437 < 150; x2437++) {
float x2438 = x537[x2437];
int32_t x2439 = x2435;
int32_t x2440 = x2439 + x2437;
float x2441 = x99[x2440];
float x2442 = x2325[x2436];
float x2443 = x2441 * x2442;
float x2444 = x2438 + x2443;
x537[x2437] = x2444;

}
x2435 += 150;

}
// add_cartesian
int32_t x2452 = 0;
for(int x2453=0; x2453 < 150; x2453++) {
for(int x2454=0; x2454 < 150; x2454++) {
int32_t x2455 = x2452;
int32_t x2456 = x2455 + x2454;
float x2457 = x236[x2456];
float x2458 = x527[x2454];
float x2459 = x2302[x2453];
float x2460 = x2458 * x2459;
float x2461 = x2457 + x2460;
x236[x2456] = x2461;

}
x2452 += 150;

}
int32_t x2468 = 0;
for(int x2469=0; x2469 < 150; x2469++) {
for(int x2470=0; x2470 < 150; x2470++) {
float x2471 = x528[x2470];
int32_t x2472 = x2468;
int32_t x2473 = x2472 + x2470;
float x2474 = x90[x2473];
float x2475 = x2302[x2469];
float x2476 = x2474 * x2475;
float x2477 = x2471 + x2476;
x528[x2470] = x2477;

}
x2468 += 150;

}
}
};
x554(x2499);
}
};
x508(x531,x532,x2506);
};
x508(x522,x523,x2516);
} else {
float** x2526 = (float**)myMalloc(6 * sizeof(float*));
x2526[0] = x515;
x2526[1] = x516;
x2526[2] = x517;
x2526[3] = x518;
x2526[4] = x519;
x2526[5] = x520;
function<void(float**)> x513 = x510;
x513(x2526);
}
};
float* x462 = (float*)myMalloc(1 * sizeof(float));
for(int x464=0; x464 < 1; x464++) {
x462[x464] = 0.0f;

}
float* x468 = (float*)myMalloc(1 * sizeof(float));
for(int x469=0; x469 < 1; x469++) {
x468[x469] = 0.0f;

}
float* x473 = (float*)myMalloc(1 * sizeof(float));
for(int x474=0; x474 < 1; x474++) {
x473[x474] = 0.0f;

}
float* x478 = (float*)myMalloc(1 * sizeof(float));
for(int x479=0; x479 < 1; x479++) {
x478[x479] = 0.0f;

}
float* x483 = (float*)myMalloc(1 * sizeof(float));
for(int x484=0; x484 < 1; x484++) {
x483[x484] = 0.0f;

}
float* x488 = (float*)myMalloc(150 * sizeof(float));
for(int x489=0; x489 < 150; x489++) {
x488[x489] = 0.0f;

}
float* x493 = (float*)myMalloc(150 * sizeof(float));
for(int x494=0; x494 < 150; x494++) {
x493[x494] = 0.0f;

}
float* x498 = (float*)myMalloc(150 * sizeof(float));
for(int x499=0; x499 < 150; x499++) {
x498[x499] = 0.0f;

}
float* x503 = (float*)myMalloc(150 * sizeof(float));
for(int x504=0; x504 < 150; x504++) {
x503[x504] = 0.0f;

}
float** x2550 = (float**)myMalloc(6 * sizeof(float*));
x2550[0] = x478;
x2550[1] = x483;
x2550[2] = x488;
x2550[3] = x493;
x2550[4] = x498;
x2550[5] = x503;
function<void(float**)> x2537 = [&](float** x2538) {
float* x2539 = x2538[0];
float* x2540 = x2538[1];
float* x2541 = x2538[2];
float* x2542 = x2538[3];
float* x2543 = x2538[4];
float* x2544 = x2538[5];
float x2545 = x2540[0];
x2540[0] = 1.0f;
float x2547 = x2539[0];
x473[0] = x2547;
};
x508(0,x2537,x2550);
float x2559 = x473[0];
float x2560 = x451;
float x2561 = (float)x452;
float x2562 = x2560 * x2561;
int32_t x2563 = x452 + 1;
float x2564 = (float)x2563;
float x2565 = x2562 / x2564;
float x2566 = x2559 / x2564;
float x2567 = x2565 + x2566;
x451 = x2567;
for(int x2569=0; x2569 < 45000; x2569++) {
float x2570 = x206[x2569];
bool x2571 = x2570 > 5.0f;
if (x2571) {
x206[x2569] = 5.0f;
} else {
}
float x2575 = x206[x2569];
bool x2576 = x2575 < -5.0f;
if (x2576) {
x206[x2569] = -5.0f;
} else {
}

}
float* x2582 = (float*)myMalloc(45000 * sizeof(float));
for(int x2583=0; x2583 < 45000; x2583++) {
float x2584 = x206[x2583];
float x2585 = x206[x2583];
float x2586 = x2584 * x2585;
x2582[x2583] = x2586;

}
for(int x2590=0; x2590 < 45000; x2590++) {
float x2591 = x336[x2590];
float x2592 = x2582[x2590];
float x2593 = x2591 + x2592;
x336[x2590] = x2593;

}
float* x2597 = (float*)myMalloc(45000 * sizeof(float));
for(int x2598=0; x2598 < 45000; x2598++) {
float x2599 = x206[x2598];
float x2600 = x2599 * 0.05f;
x2597[x2598] = x2600;

}
float* x2604 = (float*)myMalloc(45000 * sizeof(float));
for(int x2605=0; x2605 < 45000; x2605++) {
float x2606 = x336[x2605];
float x2607 = x2606 + 1.0E-8f;
x2604[x2605] = x2607;

}
float* x2611 = (float*)myMalloc(45000 * sizeof(float));
for(int x2612=0; x2612 < 45000; x2612++) {
float x2613 = x2604[x2612];
double x2614 = (double)x2613;
double x2615 = sqrt(x2614);
float x2616 = (float)x2615;
x2611[x2612] = x2616;

}
float* x2620 = (float*)myMalloc(45000 * sizeof(float));
for(int x2621=0; x2621 < 45000; x2621++) {
float x2622 = x2597[x2621];
float x2623 = x2611[x2621];
float x2624 = x2622 / x2623;
x2620[x2621] = x2624;

}
for(int x2628=0; x2628 < 45000; x2628++) {
float x2629 = x49[x2628];
float x2630 = x2620[x2628];
float x2631 = x2629 - x2630;
x49[x2628] = x2631;

}
for(int x2635=0; x2635 < 45000; x2635++) {
float x2636 = x206[x2635];
x206[x2635] = 0.0f;

}
for(int x2640=0; x2640 < 150; x2640++) {
float x2641 = x211[x2640];
bool x2642 = x2641 > 5.0f;
if (x2642) {
x211[x2640] = 5.0f;
} else {
}
float x2646 = x211[x2640];
bool x2647 = x2646 < -5.0f;
if (x2647) {
x211[x2640] = -5.0f;
} else {
}

}
float* x2653 = (float*)myMalloc(150 * sizeof(float));
for(int x2654=0; x2654 < 150; x2654++) {
float x2655 = x211[x2654];
float x2656 = x211[x2654];
float x2657 = x2655 * x2656;
x2653[x2654] = x2657;

}
for(int x2661=0; x2661 < 150; x2661++) {
float x2662 = x341[x2661];
float x2663 = x2653[x2661];
float x2664 = x2662 + x2663;
x341[x2661] = x2664;

}
float* x2668 = (float*)myMalloc(150 * sizeof(float));
for(int x2669=0; x2669 < 150; x2669++) {
float x2670 = x211[x2669];
float x2671 = x2670 * 0.05f;
x2668[x2669] = x2671;

}
float* x2675 = (float*)myMalloc(150 * sizeof(float));
for(int x2676=0; x2676 < 150; x2676++) {
float x2677 = x341[x2676];
float x2678 = x2677 + 1.0E-8f;
x2675[x2676] = x2678;

}
float* x2682 = (float*)myMalloc(150 * sizeof(float));
for(int x2683=0; x2683 < 150; x2683++) {
float x2684 = x2675[x2683];
double x2685 = (double)x2684;
double x2686 = sqrt(x2685);
float x2687 = (float)x2686;
x2682[x2683] = x2687;

}
float* x2691 = (float*)myMalloc(150 * sizeof(float));
for(int x2692=0; x2692 < 150; x2692++) {
float x2693 = x2668[x2692];
float x2694 = x2682[x2692];
float x2695 = x2693 / x2694;
x2691[x2692] = x2695;

}
for(int x2699=0; x2699 < 150; x2699++) {
float x2700 = x58[x2699];
float x2701 = x2691[x2699];
float x2702 = x2700 - x2701;
x58[x2699] = x2702;

}
for(int x2706=0; x2706 < 150; x2706++) {
float x2707 = x211[x2706];
x211[x2706] = 0.0f;

}
for(int x2711=0; x2711 < 45000; x2711++) {
float x2712 = x216[x2711];
bool x2713 = x2712 > 5.0f;
if (x2713) {
x216[x2711] = 5.0f;
} else {
}
float x2717 = x216[x2711];
bool x2718 = x2717 < -5.0f;
if (x2718) {
x216[x2711] = -5.0f;
} else {
}

}
float* x2724 = (float*)myMalloc(45000 * sizeof(float));
for(int x2725=0; x2725 < 45000; x2725++) {
float x2726 = x216[x2725];
float x2727 = x216[x2725];
float x2728 = x2726 * x2727;
x2724[x2725] = x2728;

}
for(int x2732=0; x2732 < 45000; x2732++) {
float x2733 = x346[x2732];
float x2734 = x2724[x2732];
float x2735 = x2733 + x2734;
x346[x2732] = x2735;

}
float* x2739 = (float*)myMalloc(45000 * sizeof(float));
for(int x2740=0; x2740 < 45000; x2740++) {
float x2741 = x216[x2740];
float x2742 = x2741 * 0.05f;
x2739[x2740] = x2742;

}
float* x2746 = (float*)myMalloc(45000 * sizeof(float));
for(int x2747=0; x2747 < 45000; x2747++) {
float x2748 = x346[x2747];
float x2749 = x2748 + 1.0E-8f;
x2746[x2747] = x2749;

}
float* x2753 = (float*)myMalloc(45000 * sizeof(float));
for(int x2754=0; x2754 < 45000; x2754++) {
float x2755 = x2746[x2754];
double x2756 = (double)x2755;
double x2757 = sqrt(x2756);
float x2758 = (float)x2757;
x2753[x2754] = x2758;

}
float* x2762 = (float*)myMalloc(45000 * sizeof(float));
for(int x2763=0; x2763 < 45000; x2763++) {
float x2764 = x2739[x2763];
float x2765 = x2753[x2763];
float x2766 = x2764 / x2765;
x2762[x2763] = x2766;

}
for(int x2770=0; x2770 < 45000; x2770++) {
float x2771 = x64[x2770];
float x2772 = x2762[x2770];
float x2773 = x2771 - x2772;
x64[x2770] = x2773;

}
for(int x2777=0; x2777 < 45000; x2777++) {
float x2778 = x216[x2777];
x216[x2777] = 0.0f;

}
for(int x2782=0; x2782 < 150; x2782++) {
float x2783 = x221[x2782];
bool x2784 = x2783 > 5.0f;
if (x2784) {
x221[x2782] = 5.0f;
} else {
}
float x2788 = x221[x2782];
bool x2789 = x2788 < -5.0f;
if (x2789) {
x221[x2782] = -5.0f;
} else {
}

}
float* x2795 = (float*)myMalloc(150 * sizeof(float));
for(int x2796=0; x2796 < 150; x2796++) {
float x2797 = x221[x2796];
float x2798 = x221[x2796];
float x2799 = x2797 * x2798;
x2795[x2796] = x2799;

}
for(int x2803=0; x2803 < 150; x2803++) {
float x2804 = x351[x2803];
float x2805 = x2795[x2803];
float x2806 = x2804 + x2805;
x351[x2803] = x2806;

}
float* x2810 = (float*)myMalloc(150 * sizeof(float));
for(int x2811=0; x2811 < 150; x2811++) {
float x2812 = x221[x2811];
float x2813 = x2812 * 0.05f;
x2810[x2811] = x2813;

}
float* x2817 = (float*)myMalloc(150 * sizeof(float));
for(int x2818=0; x2818 < 150; x2818++) {
float x2819 = x351[x2818];
float x2820 = x2819 + 1.0E-8f;
x2817[x2818] = x2820;

}
float* x2824 = (float*)myMalloc(150 * sizeof(float));
for(int x2825=0; x2825 < 150; x2825++) {
float x2826 = x2817[x2825];
double x2827 = (double)x2826;
double x2828 = sqrt(x2827);
float x2829 = (float)x2828;
x2824[x2825] = x2829;

}
float* x2833 = (float*)myMalloc(150 * sizeof(float));
for(int x2834=0; x2834 < 150; x2834++) {
float x2835 = x2810[x2834];
float x2836 = x2824[x2834];
float x2837 = x2835 / x2836;
x2833[x2834] = x2837;

}
for(int x2841=0; x2841 < 150; x2841++) {
float x2842 = x72[x2841];
float x2843 = x2833[x2841];
float x2844 = x2842 - x2843;
x72[x2841] = x2844;

}
for(int x2848=0; x2848 < 150; x2848++) {
float x2849 = x221[x2848];
x221[x2848] = 0.0f;

}
for(int x2853=0; x2853 < 45000; x2853++) {
float x2854 = x226[x2853];
bool x2855 = x2854 > 5.0f;
if (x2855) {
x226[x2853] = 5.0f;
} else {
}
float x2859 = x226[x2853];
bool x2860 = x2859 < -5.0f;
if (x2860) {
x226[x2853] = -5.0f;
} else {
}

}
float* x2866 = (float*)myMalloc(45000 * sizeof(float));
for(int x2867=0; x2867 < 45000; x2867++) {
float x2868 = x226[x2867];
float x2869 = x226[x2867];
float x2870 = x2868 * x2869;
x2866[x2867] = x2870;

}
for(int x2874=0; x2874 < 45000; x2874++) {
float x2875 = x356[x2874];
float x2876 = x2866[x2874];
float x2877 = x2875 + x2876;
x356[x2874] = x2877;

}
float* x2881 = (float*)myMalloc(45000 * sizeof(float));
for(int x2882=0; x2882 < 45000; x2882++) {
float x2883 = x226[x2882];
float x2884 = x2883 * 0.05f;
x2881[x2882] = x2884;

}
float* x2888 = (float*)myMalloc(45000 * sizeof(float));
for(int x2889=0; x2889 < 45000; x2889++) {
float x2890 = x356[x2889];
float x2891 = x2890 + 1.0E-8f;
x2888[x2889] = x2891;

}
float* x2895 = (float*)myMalloc(45000 * sizeof(float));
for(int x2896=0; x2896 < 45000; x2896++) {
float x2897 = x2888[x2896];
double x2898 = (double)x2897;
double x2899 = sqrt(x2898);
float x2900 = (float)x2899;
x2895[x2896] = x2900;

}
float* x2904 = (float*)myMalloc(45000 * sizeof(float));
for(int x2905=0; x2905 < 45000; x2905++) {
float x2906 = x2881[x2905];
float x2907 = x2895[x2905];
float x2908 = x2906 / x2907;
x2904[x2905] = x2908;

}
for(int x2912=0; x2912 < 45000; x2912++) {
float x2913 = x77[x2912];
float x2914 = x2904[x2912];
float x2915 = x2913 - x2914;
x77[x2912] = x2915;

}
for(int x2919=0; x2919 < 45000; x2919++) {
float x2920 = x226[x2919];
x226[x2919] = 0.0f;

}
for(int x2924=0; x2924 < 150; x2924++) {
float x2925 = x231[x2924];
bool x2926 = x2925 > 5.0f;
if (x2926) {
x231[x2924] = 5.0f;
} else {
}
float x2930 = x231[x2924];
bool x2931 = x2930 < -5.0f;
if (x2931) {
x231[x2924] = -5.0f;
} else {
}

}
float* x2937 = (float*)myMalloc(150 * sizeof(float));
for(int x2938=0; x2938 < 150; x2938++) {
float x2939 = x231[x2938];
float x2940 = x231[x2938];
float x2941 = x2939 * x2940;
x2937[x2938] = x2941;

}
for(int x2945=0; x2945 < 150; x2945++) {
float x2946 = x361[x2945];
float x2947 = x2937[x2945];
float x2948 = x2946 + x2947;
x361[x2945] = x2948;

}
float* x2952 = (float*)myMalloc(150 * sizeof(float));
for(int x2953=0; x2953 < 150; x2953++) {
float x2954 = x231[x2953];
float x2955 = x2954 * 0.05f;
x2952[x2953] = x2955;

}
float* x2959 = (float*)myMalloc(150 * sizeof(float));
for(int x2960=0; x2960 < 150; x2960++) {
float x2961 = x361[x2960];
float x2962 = x2961 + 1.0E-8f;
x2959[x2960] = x2962;

}
float* x2966 = (float*)myMalloc(150 * sizeof(float));
for(int x2967=0; x2967 < 150; x2967++) {
float x2968 = x2959[x2967];
double x2969 = (double)x2968;
double x2970 = sqrt(x2969);
float x2971 = (float)x2970;
x2966[x2967] = x2971;

}
float* x2975 = (float*)myMalloc(150 * sizeof(float));
for(int x2976=0; x2976 < 150; x2976++) {
float x2977 = x2952[x2976];
float x2978 = x2966[x2976];
float x2979 = x2977 / x2978;
x2975[x2976] = x2979;

}
for(int x2983=0; x2983 < 150; x2983++) {
float x2984 = x85[x2983];
float x2985 = x2975[x2983];
float x2986 = x2984 - x2985;
x85[x2983] = x2986;

}
for(int x2990=0; x2990 < 150; x2990++) {
float x2991 = x231[x2990];
x231[x2990] = 0.0f;

}
for(int x2995=0; x2995 < 22500; x2995++) {
float x2996 = x236[x2995];
bool x2997 = x2996 > 5.0f;
if (x2997) {
x236[x2995] = 5.0f;
} else {
}
float x3001 = x236[x2995];
bool x3002 = x3001 < -5.0f;
if (x3002) {
x236[x2995] = -5.0f;
} else {
}

}
float* x3008 = (float*)myMalloc(22500 * sizeof(float));
for(int x3009=0; x3009 < 22500; x3009++) {
float x3010 = x236[x3009];
float x3011 = x236[x3009];
float x3012 = x3010 * x3011;
x3008[x3009] = x3012;

}
for(int x3016=0; x3016 < 22500; x3016++) {
float x3017 = x366[x3016];
float x3018 = x3008[x3016];
float x3019 = x3017 + x3018;
x366[x3016] = x3019;

}
float* x3023 = (float*)myMalloc(22500 * sizeof(float));
for(int x3024=0; x3024 < 22500; x3024++) {
float x3025 = x236[x3024];
float x3026 = x3025 * 0.05f;
x3023[x3024] = x3026;

}
float* x3030 = (float*)myMalloc(22500 * sizeof(float));
for(int x3031=0; x3031 < 22500; x3031++) {
float x3032 = x366[x3031];
float x3033 = x3032 + 1.0E-8f;
x3030[x3031] = x3033;

}
float* x3037 = (float*)myMalloc(22500 * sizeof(float));
for(int x3038=0; x3038 < 22500; x3038++) {
float x3039 = x3030[x3038];
double x3040 = (double)x3039;
double x3041 = sqrt(x3040);
float x3042 = (float)x3041;
x3037[x3038] = x3042;

}
float* x3046 = (float*)myMalloc(22500 * sizeof(float));
for(int x3047=0; x3047 < 22500; x3047++) {
float x3048 = x3023[x3047];
float x3049 = x3037[x3047];
float x3050 = x3048 / x3049;
x3046[x3047] = x3050;

}
for(int x3054=0; x3054 < 22500; x3054++) {
float x3055 = x90[x3054];
float x3056 = x3046[x3054];
float x3057 = x3055 - x3056;
x90[x3054] = x3057;

}
for(int x3061=0; x3061 < 22500; x3061++) {
float x3062 = x236[x3061];
x236[x3061] = 0.0f;

}
for(int x3066=0; x3066 < 22500; x3066++) {
float x3067 = x241[x3066];
bool x3068 = x3067 > 5.0f;
if (x3068) {
x241[x3066] = 5.0f;
} else {
}
float x3072 = x241[x3066];
bool x3073 = x3072 < -5.0f;
if (x3073) {
x241[x3066] = -5.0f;
} else {
}

}
float* x3079 = (float*)myMalloc(22500 * sizeof(float));
for(int x3080=0; x3080 < 22500; x3080++) {
float x3081 = x241[x3080];
float x3082 = x241[x3080];
float x3083 = x3081 * x3082;
x3079[x3080] = x3083;

}
for(int x3087=0; x3087 < 22500; x3087++) {
float x3088 = x371[x3087];
float x3089 = x3079[x3087];
float x3090 = x3088 + x3089;
x371[x3087] = x3090;

}
float* x3094 = (float*)myMalloc(22500 * sizeof(float));
for(int x3095=0; x3095 < 22500; x3095++) {
float x3096 = x241[x3095];
float x3097 = x3096 * 0.05f;
x3094[x3095] = x3097;

}
float* x3101 = (float*)myMalloc(22500 * sizeof(float));
for(int x3102=0; x3102 < 22500; x3102++) {
float x3103 = x371[x3102];
float x3104 = x3103 + 1.0E-8f;
x3101[x3102] = x3104;

}
float* x3108 = (float*)myMalloc(22500 * sizeof(float));
for(int x3109=0; x3109 < 22500; x3109++) {
float x3110 = x3101[x3109];
double x3111 = (double)x3110;
double x3112 = sqrt(x3111);
float x3113 = (float)x3112;
x3108[x3109] = x3113;

}
float* x3117 = (float*)myMalloc(22500 * sizeof(float));
for(int x3118=0; x3118 < 22500; x3118++) {
float x3119 = x3094[x3118];
float x3120 = x3108[x3118];
float x3121 = x3119 / x3120;
x3117[x3118] = x3121;

}
for(int x3125=0; x3125 < 22500; x3125++) {
float x3126 = x99[x3125];
float x3127 = x3117[x3125];
float x3128 = x3126 - x3127;
x99[x3125] = x3128;

}
for(int x3132=0; x3132 < 22500; x3132++) {
float x3133 = x241[x3132];
x241[x3132] = 0.0f;

}
for(int x3137=0; x3137 < 150; x3137++) {
float x3138 = x246[x3137];
bool x3139 = x3138 > 5.0f;
if (x3139) {
x246[x3137] = 5.0f;
} else {
}
float x3143 = x246[x3137];
bool x3144 = x3143 < -5.0f;
if (x3144) {
x246[x3137] = -5.0f;
} else {
}

}
float* x3150 = (float*)myMalloc(150 * sizeof(float));
for(int x3151=0; x3151 < 150; x3151++) {
float x3152 = x246[x3151];
float x3153 = x246[x3151];
float x3154 = x3152 * x3153;
x3150[x3151] = x3154;

}
for(int x3158=0; x3158 < 150; x3158++) {
float x3159 = x376[x3158];
float x3160 = x3150[x3158];
float x3161 = x3159 + x3160;
x376[x3158] = x3161;

}
float* x3165 = (float*)myMalloc(150 * sizeof(float));
for(int x3166=0; x3166 < 150; x3166++) {
float x3167 = x246[x3166];
float x3168 = x3167 * 0.05f;
x3165[x3166] = x3168;

}
float* x3172 = (float*)myMalloc(150 * sizeof(float));
for(int x3173=0; x3173 < 150; x3173++) {
float x3174 = x376[x3173];
float x3175 = x3174 + 1.0E-8f;
x3172[x3173] = x3175;

}
float* x3179 = (float*)myMalloc(150 * sizeof(float));
for(int x3180=0; x3180 < 150; x3180++) {
float x3181 = x3172[x3180];
double x3182 = (double)x3181;
double x3183 = sqrt(x3182);
float x3184 = (float)x3183;
x3179[x3180] = x3184;

}
float* x3188 = (float*)myMalloc(150 * sizeof(float));
for(int x3189=0; x3189 < 150; x3189++) {
float x3190 = x3165[x3189];
float x3191 = x3179[x3189];
float x3192 = x3190 / x3191;
x3188[x3189] = x3192;

}
for(int x3196=0; x3196 < 150; x3196++) {
float x3197 = x107[x3196];
float x3198 = x3188[x3196];
float x3199 = x3197 - x3198;
x107[x3196] = x3199;

}
for(int x3203=0; x3203 < 150; x3203++) {
float x3204 = x246[x3203];
x246[x3203] = 0.0f;

}
for(int x3208=0; x3208 < 22500; x3208++) {
float x3209 = x251[x3208];
bool x3210 = x3209 > 5.0f;
if (x3210) {
x251[x3208] = 5.0f;
} else {
}
float x3214 = x251[x3208];
bool x3215 = x3214 < -5.0f;
if (x3215) {
x251[x3208] = -5.0f;
} else {
}

}
float* x3221 = (float*)myMalloc(22500 * sizeof(float));
for(int x3222=0; x3222 < 22500; x3222++) {
float x3223 = x251[x3222];
float x3224 = x251[x3222];
float x3225 = x3223 * x3224;
x3221[x3222] = x3225;

}
for(int x3229=0; x3229 < 22500; x3229++) {
float x3230 = x381[x3229];
float x3231 = x3221[x3229];
float x3232 = x3230 + x3231;
x381[x3229] = x3232;

}
float* x3236 = (float*)myMalloc(22500 * sizeof(float));
for(int x3237=0; x3237 < 22500; x3237++) {
float x3238 = x251[x3237];
float x3239 = x3238 * 0.05f;
x3236[x3237] = x3239;

}
float* x3243 = (float*)myMalloc(22500 * sizeof(float));
for(int x3244=0; x3244 < 22500; x3244++) {
float x3245 = x381[x3244];
float x3246 = x3245 + 1.0E-8f;
x3243[x3244] = x3246;

}
float* x3250 = (float*)myMalloc(22500 * sizeof(float));
for(int x3251=0; x3251 < 22500; x3251++) {
float x3252 = x3243[x3251];
double x3253 = (double)x3252;
double x3254 = sqrt(x3253);
float x3255 = (float)x3254;
x3250[x3251] = x3255;

}
float* x3259 = (float*)myMalloc(22500 * sizeof(float));
for(int x3260=0; x3260 < 22500; x3260++) {
float x3261 = x3236[x3260];
float x3262 = x3250[x3260];
float x3263 = x3261 / x3262;
x3259[x3260] = x3263;

}
for(int x3267=0; x3267 < 22500; x3267++) {
float x3268 = x112[x3267];
float x3269 = x3259[x3267];
float x3270 = x3268 - x3269;
x112[x3267] = x3270;

}
for(int x3274=0; x3274 < 22500; x3274++) {
float x3275 = x251[x3274];
x251[x3274] = 0.0f;

}
for(int x3279=0; x3279 < 22500; x3279++) {
float x3280 = x256[x3279];
bool x3281 = x3280 > 5.0f;
if (x3281) {
x256[x3279] = 5.0f;
} else {
}
float x3285 = x256[x3279];
bool x3286 = x3285 < -5.0f;
if (x3286) {
x256[x3279] = -5.0f;
} else {
}

}
float* x3292 = (float*)myMalloc(22500 * sizeof(float));
for(int x3293=0; x3293 < 22500; x3293++) {
float x3294 = x256[x3293];
float x3295 = x256[x3293];
float x3296 = x3294 * x3295;
x3292[x3293] = x3296;

}
for(int x3300=0; x3300 < 22500; x3300++) {
float x3301 = x386[x3300];
float x3302 = x3292[x3300];
float x3303 = x3301 + x3302;
x386[x3300] = x3303;

}
float* x3307 = (float*)myMalloc(22500 * sizeof(float));
for(int x3308=0; x3308 < 22500; x3308++) {
float x3309 = x256[x3308];
float x3310 = x3309 * 0.05f;
x3307[x3308] = x3310;

}
float* x3314 = (float*)myMalloc(22500 * sizeof(float));
for(int x3315=0; x3315 < 22500; x3315++) {
float x3316 = x386[x3315];
float x3317 = x3316 + 1.0E-8f;
x3314[x3315] = x3317;

}
float* x3321 = (float*)myMalloc(22500 * sizeof(float));
for(int x3322=0; x3322 < 22500; x3322++) {
float x3323 = x3314[x3322];
double x3324 = (double)x3323;
double x3325 = sqrt(x3324);
float x3326 = (float)x3325;
x3321[x3322] = x3326;

}
float* x3330 = (float*)myMalloc(22500 * sizeof(float));
for(int x3331=0; x3331 < 22500; x3331++) {
float x3332 = x3307[x3331];
float x3333 = x3321[x3331];
float x3334 = x3332 / x3333;
x3330[x3331] = x3334;

}
for(int x3338=0; x3338 < 22500; x3338++) {
float x3339 = x120[x3338];
float x3340 = x3330[x3338];
float x3341 = x3339 - x3340;
x120[x3338] = x3341;

}
for(int x3345=0; x3345 < 22500; x3345++) {
float x3346 = x256[x3345];
x256[x3345] = 0.0f;

}
for(int x3350=0; x3350 < 22500; x3350++) {
float x3351 = x261[x3350];
bool x3352 = x3351 > 5.0f;
if (x3352) {
x261[x3350] = 5.0f;
} else {
}
float x3356 = x261[x3350];
bool x3357 = x3356 < -5.0f;
if (x3357) {
x261[x3350] = -5.0f;
} else {
}

}
float* x3363 = (float*)myMalloc(22500 * sizeof(float));
for(int x3364=0; x3364 < 22500; x3364++) {
float x3365 = x261[x3364];
float x3366 = x261[x3364];
float x3367 = x3365 * x3366;
x3363[x3364] = x3367;

}
for(int x3371=0; x3371 < 22500; x3371++) {
float x3372 = x391[x3371];
float x3373 = x3363[x3371];
float x3374 = x3372 + x3373;
x391[x3371] = x3374;

}
float* x3378 = (float*)myMalloc(22500 * sizeof(float));
for(int x3379=0; x3379 < 22500; x3379++) {
float x3380 = x261[x3379];
float x3381 = x3380 * 0.05f;
x3378[x3379] = x3381;

}
float* x3385 = (float*)myMalloc(22500 * sizeof(float));
for(int x3386=0; x3386 < 22500; x3386++) {
float x3387 = x391[x3386];
float x3388 = x3387 + 1.0E-8f;
x3385[x3386] = x3388;

}
float* x3392 = (float*)myMalloc(22500 * sizeof(float));
for(int x3393=0; x3393 < 22500; x3393++) {
float x3394 = x3385[x3393];
double x3395 = (double)x3394;
double x3396 = sqrt(x3395);
float x3397 = (float)x3396;
x3392[x3393] = x3397;

}
float* x3401 = (float*)myMalloc(22500 * sizeof(float));
for(int x3402=0; x3402 < 22500; x3402++) {
float x3403 = x3378[x3402];
float x3404 = x3392[x3402];
float x3405 = x3403 / x3404;
x3401[x3402] = x3405;

}
for(int x3409=0; x3409 < 22500; x3409++) {
float x3410 = x128[x3409];
float x3411 = x3401[x3409];
float x3412 = x3410 - x3411;
x128[x3409] = x3412;

}
for(int x3416=0; x3416 < 22500; x3416++) {
float x3417 = x261[x3416];
x261[x3416] = 0.0f;

}
for(int x3421=0; x3421 < 22500; x3421++) {
float x3422 = x266[x3421];
bool x3423 = x3422 > 5.0f;
if (x3423) {
x266[x3421] = 5.0f;
} else {
}
float x3427 = x266[x3421];
bool x3428 = x3427 < -5.0f;
if (x3428) {
x266[x3421] = -5.0f;
} else {
}

}
float* x3434 = (float*)myMalloc(22500 * sizeof(float));
for(int x3435=0; x3435 < 22500; x3435++) {
float x3436 = x266[x3435];
float x3437 = x266[x3435];
float x3438 = x3436 * x3437;
x3434[x3435] = x3438;

}
for(int x3442=0; x3442 < 22500; x3442++) {
float x3443 = x396[x3442];
float x3444 = x3434[x3442];
float x3445 = x3443 + x3444;
x396[x3442] = x3445;

}
float* x3449 = (float*)myMalloc(22500 * sizeof(float));
for(int x3450=0; x3450 < 22500; x3450++) {
float x3451 = x266[x3450];
float x3452 = x3451 * 0.05f;
x3449[x3450] = x3452;

}
float* x3456 = (float*)myMalloc(22500 * sizeof(float));
for(int x3457=0; x3457 < 22500; x3457++) {
float x3458 = x396[x3457];
float x3459 = x3458 + 1.0E-8f;
x3456[x3457] = x3459;

}
float* x3463 = (float*)myMalloc(22500 * sizeof(float));
for(int x3464=0; x3464 < 22500; x3464++) {
float x3465 = x3456[x3464];
double x3466 = (double)x3465;
double x3467 = sqrt(x3466);
float x3468 = (float)x3467;
x3463[x3464] = x3468;

}
float* x3472 = (float*)myMalloc(22500 * sizeof(float));
for(int x3473=0; x3473 < 22500; x3473++) {
float x3474 = x3449[x3473];
float x3475 = x3463[x3473];
float x3476 = x3474 / x3475;
x3472[x3473] = x3476;

}
for(int x3480=0; x3480 < 22500; x3480++) {
float x3481 = x136[x3480];
float x3482 = x3472[x3480];
float x3483 = x3481 - x3482;
x136[x3480] = x3483;

}
for(int x3487=0; x3487 < 22500; x3487++) {
float x3488 = x266[x3487];
x266[x3487] = 0.0f;

}
for(int x3492=0; x3492 < 150; x3492++) {
float x3493 = x271[x3492];
bool x3494 = x3493 > 5.0f;
if (x3494) {
x271[x3492] = 5.0f;
} else {
}
float x3498 = x271[x3492];
bool x3499 = x3498 < -5.0f;
if (x3499) {
x271[x3492] = -5.0f;
} else {
}

}
float* x3505 = (float*)myMalloc(150 * sizeof(float));
for(int x3506=0; x3506 < 150; x3506++) {
float x3507 = x271[x3506];
float x3508 = x271[x3506];
float x3509 = x3507 * x3508;
x3505[x3506] = x3509;

}
for(int x3513=0; x3513 < 150; x3513++) {
float x3514 = x401[x3513];
float x3515 = x3505[x3513];
float x3516 = x3514 + x3515;
x401[x3513] = x3516;

}
float* x3520 = (float*)myMalloc(150 * sizeof(float));
for(int x3521=0; x3521 < 150; x3521++) {
float x3522 = x271[x3521];
float x3523 = x3522 * 0.05f;
x3520[x3521] = x3523;

}
float* x3527 = (float*)myMalloc(150 * sizeof(float));
for(int x3528=0; x3528 < 150; x3528++) {
float x3529 = x401[x3528];
float x3530 = x3529 + 1.0E-8f;
x3527[x3528] = x3530;

}
float* x3534 = (float*)myMalloc(150 * sizeof(float));
for(int x3535=0; x3535 < 150; x3535++) {
float x3536 = x3527[x3535];
double x3537 = (double)x3536;
double x3538 = sqrt(x3537);
float x3539 = (float)x3538;
x3534[x3535] = x3539;

}
float* x3543 = (float*)myMalloc(150 * sizeof(float));
for(int x3544=0; x3544 < 150; x3544++) {
float x3545 = x3520[x3544];
float x3546 = x3534[x3544];
float x3547 = x3545 / x3546;
x3543[x3544] = x3547;

}
for(int x3551=0; x3551 < 150; x3551++) {
float x3552 = x144[x3551];
float x3553 = x3543[x3551];
float x3554 = x3552 - x3553;
x144[x3551] = x3554;

}
for(int x3558=0; x3558 < 150; x3558++) {
float x3559 = x271[x3558];
x271[x3558] = 0.0f;

}
for(int x3563=0; x3563 < 22500; x3563++) {
float x3564 = x276[x3563];
bool x3565 = x3564 > 5.0f;
if (x3565) {
x276[x3563] = 5.0f;
} else {
}
float x3569 = x276[x3563];
bool x3570 = x3569 < -5.0f;
if (x3570) {
x276[x3563] = -5.0f;
} else {
}

}
float* x3576 = (float*)myMalloc(22500 * sizeof(float));
for(int x3577=0; x3577 < 22500; x3577++) {
float x3578 = x276[x3577];
float x3579 = x276[x3577];
float x3580 = x3578 * x3579;
x3576[x3577] = x3580;

}
for(int x3584=0; x3584 < 22500; x3584++) {
float x3585 = x406[x3584];
float x3586 = x3576[x3584];
float x3587 = x3585 + x3586;
x406[x3584] = x3587;

}
float* x3591 = (float*)myMalloc(22500 * sizeof(float));
for(int x3592=0; x3592 < 22500; x3592++) {
float x3593 = x276[x3592];
float x3594 = x3593 * 0.05f;
x3591[x3592] = x3594;

}
float* x3598 = (float*)myMalloc(22500 * sizeof(float));
for(int x3599=0; x3599 < 22500; x3599++) {
float x3600 = x406[x3599];
float x3601 = x3600 + 1.0E-8f;
x3598[x3599] = x3601;

}
float* x3605 = (float*)myMalloc(22500 * sizeof(float));
for(int x3606=0; x3606 < 22500; x3606++) {
float x3607 = x3598[x3606];
double x3608 = (double)x3607;
double x3609 = sqrt(x3608);
float x3610 = (float)x3609;
x3605[x3606] = x3610;

}
float* x3614 = (float*)myMalloc(22500 * sizeof(float));
for(int x3615=0; x3615 < 22500; x3615++) {
float x3616 = x3591[x3615];
float x3617 = x3605[x3615];
float x3618 = x3616 / x3617;
x3614[x3615] = x3618;

}
for(int x3622=0; x3622 < 22500; x3622++) {
float x3623 = x149[x3622];
float x3624 = x3614[x3622];
float x3625 = x3623 - x3624;
x149[x3622] = x3625;

}
for(int x3629=0; x3629 < 22500; x3629++) {
float x3630 = x276[x3629];
x276[x3629] = 0.0f;

}
for(int x3634=0; x3634 < 22500; x3634++) {
float x3635 = x281[x3634];
bool x3636 = x3635 > 5.0f;
if (x3636) {
x281[x3634] = 5.0f;
} else {
}
float x3640 = x281[x3634];
bool x3641 = x3640 < -5.0f;
if (x3641) {
x281[x3634] = -5.0f;
} else {
}

}
float* x3647 = (float*)myMalloc(22500 * sizeof(float));
for(int x3648=0; x3648 < 22500; x3648++) {
float x3649 = x281[x3648];
float x3650 = x281[x3648];
float x3651 = x3649 * x3650;
x3647[x3648] = x3651;

}
for(int x3655=0; x3655 < 22500; x3655++) {
float x3656 = x411[x3655];
float x3657 = x3647[x3655];
float x3658 = x3656 + x3657;
x411[x3655] = x3658;

}
float* x3662 = (float*)myMalloc(22500 * sizeof(float));
for(int x3663=0; x3663 < 22500; x3663++) {
float x3664 = x281[x3663];
float x3665 = x3664 * 0.05f;
x3662[x3663] = x3665;

}
float* x3669 = (float*)myMalloc(22500 * sizeof(float));
for(int x3670=0; x3670 < 22500; x3670++) {
float x3671 = x411[x3670];
float x3672 = x3671 + 1.0E-8f;
x3669[x3670] = x3672;

}
float* x3676 = (float*)myMalloc(22500 * sizeof(float));
for(int x3677=0; x3677 < 22500; x3677++) {
float x3678 = x3669[x3677];
double x3679 = (double)x3678;
double x3680 = sqrt(x3679);
float x3681 = (float)x3680;
x3676[x3677] = x3681;

}
float* x3685 = (float*)myMalloc(22500 * sizeof(float));
for(int x3686=0; x3686 < 22500; x3686++) {
float x3687 = x3662[x3686];
float x3688 = x3676[x3686];
float x3689 = x3687 / x3688;
x3685[x3686] = x3689;

}
for(int x3693=0; x3693 < 22500; x3693++) {
float x3694 = x157[x3693];
float x3695 = x3685[x3693];
float x3696 = x3694 - x3695;
x157[x3693] = x3696;

}
for(int x3700=0; x3700 < 22500; x3700++) {
float x3701 = x281[x3700];
x281[x3700] = 0.0f;

}
for(int x3705=0; x3705 < 150; x3705++) {
float x3706 = x286[x3705];
bool x3707 = x3706 > 5.0f;
if (x3707) {
x286[x3705] = 5.0f;
} else {
}
float x3711 = x286[x3705];
bool x3712 = x3711 < -5.0f;
if (x3712) {
x286[x3705] = -5.0f;
} else {
}

}
float* x3718 = (float*)myMalloc(150 * sizeof(float));
for(int x3719=0; x3719 < 150; x3719++) {
float x3720 = x286[x3719];
float x3721 = x286[x3719];
float x3722 = x3720 * x3721;
x3718[x3719] = x3722;

}
for(int x3726=0; x3726 < 150; x3726++) {
float x3727 = x416[x3726];
float x3728 = x3718[x3726];
float x3729 = x3727 + x3728;
x416[x3726] = x3729;

}
float* x3733 = (float*)myMalloc(150 * sizeof(float));
for(int x3734=0; x3734 < 150; x3734++) {
float x3735 = x286[x3734];
float x3736 = x3735 * 0.05f;
x3733[x3734] = x3736;

}
float* x3740 = (float*)myMalloc(150 * sizeof(float));
for(int x3741=0; x3741 < 150; x3741++) {
float x3742 = x416[x3741];
float x3743 = x3742 + 1.0E-8f;
x3740[x3741] = x3743;

}
float* x3747 = (float*)myMalloc(150 * sizeof(float));
for(int x3748=0; x3748 < 150; x3748++) {
float x3749 = x3740[x3748];
double x3750 = (double)x3749;
double x3751 = sqrt(x3750);
float x3752 = (float)x3751;
x3747[x3748] = x3752;

}
float* x3756 = (float*)myMalloc(150 * sizeof(float));
for(int x3757=0; x3757 < 150; x3757++) {
float x3758 = x3733[x3757];
float x3759 = x3747[x3757];
float x3760 = x3758 / x3759;
x3756[x3757] = x3760;

}
for(int x3764=0; x3764 < 150; x3764++) {
float x3765 = x165[x3764];
float x3766 = x3756[x3764];
float x3767 = x3765 - x3766;
x165[x3764] = x3767;

}
for(int x3771=0; x3771 < 150; x3771++) {
float x3772 = x286[x3771];
x286[x3771] = 0.0f;

}
for(int x3776=0; x3776 < 22500; x3776++) {
float x3777 = x291[x3776];
bool x3778 = x3777 > 5.0f;
if (x3778) {
x291[x3776] = 5.0f;
} else {
}
float x3782 = x291[x3776];
bool x3783 = x3782 < -5.0f;
if (x3783) {
x291[x3776] = -5.0f;
} else {
}

}
float* x3789 = (float*)myMalloc(22500 * sizeof(float));
for(int x3790=0; x3790 < 22500; x3790++) {
float x3791 = x291[x3790];
float x3792 = x291[x3790];
float x3793 = x3791 * x3792;
x3789[x3790] = x3793;

}
for(int x3797=0; x3797 < 22500; x3797++) {
float x3798 = x421[x3797];
float x3799 = x3789[x3797];
float x3800 = x3798 + x3799;
x421[x3797] = x3800;

}
float* x3804 = (float*)myMalloc(22500 * sizeof(float));
for(int x3805=0; x3805 < 22500; x3805++) {
float x3806 = x291[x3805];
float x3807 = x3806 * 0.05f;
x3804[x3805] = x3807;

}
float* x3811 = (float*)myMalloc(22500 * sizeof(float));
for(int x3812=0; x3812 < 22500; x3812++) {
float x3813 = x421[x3812];
float x3814 = x3813 + 1.0E-8f;
x3811[x3812] = x3814;

}
float* x3818 = (float*)myMalloc(22500 * sizeof(float));
for(int x3819=0; x3819 < 22500; x3819++) {
float x3820 = x3811[x3819];
double x3821 = (double)x3820;
double x3822 = sqrt(x3821);
float x3823 = (float)x3822;
x3818[x3819] = x3823;

}
float* x3827 = (float*)myMalloc(22500 * sizeof(float));
for(int x3828=0; x3828 < 22500; x3828++) {
float x3829 = x3804[x3828];
float x3830 = x3818[x3828];
float x3831 = x3829 / x3830;
x3827[x3828] = x3831;

}
for(int x3835=0; x3835 < 22500; x3835++) {
float x3836 = x170[x3835];
float x3837 = x3827[x3835];
float x3838 = x3836 - x3837;
x170[x3835] = x3838;

}
for(int x3842=0; x3842 < 22500; x3842++) {
float x3843 = x291[x3842];
x291[x3842] = 0.0f;

}
for(int x3847=0; x3847 < 22500; x3847++) {
float x3848 = x296[x3847];
bool x3849 = x3848 > 5.0f;
if (x3849) {
x296[x3847] = 5.0f;
} else {
}
float x3853 = x296[x3847];
bool x3854 = x3853 < -5.0f;
if (x3854) {
x296[x3847] = -5.0f;
} else {
}

}
float* x3860 = (float*)myMalloc(22500 * sizeof(float));
for(int x3861=0; x3861 < 22500; x3861++) {
float x3862 = x296[x3861];
float x3863 = x296[x3861];
float x3864 = x3862 * x3863;
x3860[x3861] = x3864;

}
for(int x3868=0; x3868 < 22500; x3868++) {
float x3869 = x426[x3868];
float x3870 = x3860[x3868];
float x3871 = x3869 + x3870;
x426[x3868] = x3871;

}
float* x3875 = (float*)myMalloc(22500 * sizeof(float));
for(int x3876=0; x3876 < 22500; x3876++) {
float x3877 = x296[x3876];
float x3878 = x3877 * 0.05f;
x3875[x3876] = x3878;

}
float* x3882 = (float*)myMalloc(22500 * sizeof(float));
for(int x3883=0; x3883 < 22500; x3883++) {
float x3884 = x426[x3883];
float x3885 = x3884 + 1.0E-8f;
x3882[x3883] = x3885;

}
float* x3889 = (float*)myMalloc(22500 * sizeof(float));
for(int x3890=0; x3890 < 22500; x3890++) {
float x3891 = x3882[x3890];
double x3892 = (double)x3891;
double x3893 = sqrt(x3892);
float x3894 = (float)x3893;
x3889[x3890] = x3894;

}
float* x3898 = (float*)myMalloc(22500 * sizeof(float));
for(int x3899=0; x3899 < 22500; x3899++) {
float x3900 = x3875[x3899];
float x3901 = x3889[x3899];
float x3902 = x3900 / x3901;
x3898[x3899] = x3902;

}
for(int x3906=0; x3906 < 22500; x3906++) {
float x3907 = x178[x3906];
float x3908 = x3898[x3906];
float x3909 = x3907 - x3908;
x178[x3906] = x3909;

}
for(int x3913=0; x3913 < 22500; x3913++) {
float x3914 = x296[x3913];
x296[x3913] = 0.0f;

}
for(int x3918=0; x3918 < 150; x3918++) {
float x3919 = x301[x3918];
bool x3920 = x3919 > 5.0f;
if (x3920) {
x301[x3918] = 5.0f;
} else {
}
float x3924 = x301[x3918];
bool x3925 = x3924 < -5.0f;
if (x3925) {
x301[x3918] = -5.0f;
} else {
}

}
float* x3931 = (float*)myMalloc(150 * sizeof(float));
for(int x3932=0; x3932 < 150; x3932++) {
float x3933 = x301[x3932];
float x3934 = x301[x3932];
float x3935 = x3933 * x3934;
x3931[x3932] = x3935;

}
for(int x3939=0; x3939 < 150; x3939++) {
float x3940 = x431[x3939];
float x3941 = x3931[x3939];
float x3942 = x3940 + x3941;
x431[x3939] = x3942;

}
float* x3946 = (float*)myMalloc(150 * sizeof(float));
for(int x3947=0; x3947 < 150; x3947++) {
float x3948 = x301[x3947];
float x3949 = x3948 * 0.05f;
x3946[x3947] = x3949;

}
float* x3953 = (float*)myMalloc(150 * sizeof(float));
for(int x3954=0; x3954 < 150; x3954++) {
float x3955 = x431[x3954];
float x3956 = x3955 + 1.0E-8f;
x3953[x3954] = x3956;

}
float* x3960 = (float*)myMalloc(150 * sizeof(float));
for(int x3961=0; x3961 < 150; x3961++) {
float x3962 = x3953[x3961];
double x3963 = (double)x3962;
double x3964 = sqrt(x3963);
float x3965 = (float)x3964;
x3960[x3961] = x3965;

}
float* x3969 = (float*)myMalloc(150 * sizeof(float));
for(int x3970=0; x3970 < 150; x3970++) {
float x3971 = x3946[x3970];
float x3972 = x3960[x3970];
float x3973 = x3971 / x3972;
x3969[x3970] = x3973;

}
for(int x3977=0; x3977 < 150; x3977++) {
float x3978 = x186[x3977];
float x3979 = x3969[x3977];
float x3980 = x3978 - x3979;
x186[x3977] = x3980;

}
for(int x3984=0; x3984 < 150; x3984++) {
float x3985 = x301[x3984];
x301[x3984] = 0.0f;

}
for(int x3989=0; x3989 < 750; x3989++) {
float x3990 = x306[x3989];
bool x3991 = x3990 > 5.0f;
if (x3991) {
x306[x3989] = 5.0f;
} else {
}
float x3995 = x306[x3989];
bool x3996 = x3995 < -5.0f;
if (x3996) {
x306[x3989] = -5.0f;
} else {
}

}
float* x4002 = (float*)myMalloc(750 * sizeof(float));
for(int x4003=0; x4003 < 750; x4003++) {
float x4004 = x306[x4003];
float x4005 = x306[x4003];
float x4006 = x4004 * x4005;
x4002[x4003] = x4006;

}
for(int x4010=0; x4010 < 750; x4010++) {
float x4011 = x436[x4010];
float x4012 = x4002[x4010];
float x4013 = x4011 + x4012;
x436[x4010] = x4013;

}
float* x4017 = (float*)myMalloc(750 * sizeof(float));
for(int x4018=0; x4018 < 750; x4018++) {
float x4019 = x306[x4018];
float x4020 = x4019 * 0.05f;
x4017[x4018] = x4020;

}
float* x4024 = (float*)myMalloc(750 * sizeof(float));
for(int x4025=0; x4025 < 750; x4025++) {
float x4026 = x436[x4025];
float x4027 = x4026 + 1.0E-8f;
x4024[x4025] = x4027;

}
float* x4031 = (float*)myMalloc(750 * sizeof(float));
for(int x4032=0; x4032 < 750; x4032++) {
float x4033 = x4024[x4032];
double x4034 = (double)x4033;
double x4035 = sqrt(x4034);
float x4036 = (float)x4035;
x4031[x4032] = x4036;

}
float* x4040 = (float*)myMalloc(750 * sizeof(float));
for(int x4041=0; x4041 < 750; x4041++) {
float x4042 = x4017[x4041];
float x4043 = x4031[x4041];
float x4044 = x4042 / x4043;
x4040[x4041] = x4044;

}
for(int x4048=0; x4048 < 750; x4048++) {
float x4049 = x191[x4048];
float x4050 = x4040[x4048];
float x4051 = x4049 - x4050;
x191[x4048] = x4051;

}
for(int x4055=0; x4055 < 750; x4055++) {
float x4056 = x306[x4055];
x306[x4055] = 0.0f;

}
for(int x4060=0; x4060 < 5; x4060++) {
float x4061 = x311[x4060];
bool x4062 = x4061 > 5.0f;
if (x4062) {
x311[x4060] = 5.0f;
} else {
}
float x4066 = x311[x4060];
bool x4067 = x4066 < -5.0f;
if (x4067) {
x311[x4060] = -5.0f;
} else {
}

}
float* x4073 = (float*)myMalloc(5 * sizeof(float));
for(int x4074=0; x4074 < 5; x4074++) {
float x4075 = x311[x4074];
float x4076 = x311[x4074];
float x4077 = x4075 * x4076;
x4073[x4074] = x4077;

}
for(int x4081=0; x4081 < 5; x4081++) {
float x4082 = x441[x4081];
float x4083 = x4073[x4081];
float x4084 = x4082 + x4083;
x441[x4081] = x4084;

}
float* x4088 = (float*)myMalloc(5 * sizeof(float));
for(int x4089=0; x4089 < 5; x4089++) {
float x4090 = x311[x4089];
float x4091 = x4090 * 0.05f;
x4088[x4089] = x4091;

}
float* x4095 = (float*)myMalloc(5 * sizeof(float));
for(int x4096=0; x4096 < 5; x4096++) {
float x4097 = x441[x4096];
float x4098 = x4097 + 1.0E-8f;
x4095[x4096] = x4098;

}
float* x4102 = (float*)myMalloc(5 * sizeof(float));
for(int x4103=0; x4103 < 5; x4103++) {
float x4104 = x4095[x4103];
double x4105 = (double)x4104;
double x4106 = sqrt(x4105);
float x4107 = (float)x4106;
x4102[x4103] = x4107;

}
float* x4111 = (float*)myMalloc(5 * sizeof(float));
for(int x4112=0; x4112 < 5; x4112++) {
float x4113 = x4088[x4112];
float x4114 = x4102[x4112];
float x4115 = x4113 / x4114;
x4111[x4112] = x4115;

}
for(int x4119=0; x4119 < 5; x4119++) {
float x4120 = x200[x4119];
float x4121 = x4111[x4119];
float x4122 = x4120 - x4121;
x200[x4119] = x4122;

}
for(int x4126=0; x4126 < 5; x4126++) {
float x4127 = x311[x4126];
x311[x4126] = 0.0f;

}
mallocAddr = (void*)x447;

}
float x4134 = x451;
double x4135 = (double)x4134;
x446[x450] = x4135;
double x4137 = ((double)clock() / CLOCKS_PER_SEC);
double x4138 = x4137 - x448;
printf("epoc %d, average_loss %f, time %lf\n",x450,x4134,x4138);

}
double x4142 = ((double)clock() / CLOCKS_PER_SEC);
int64_t x4146 = (long)fopen(x0, "w");
fprintf((FILE *)x4146, "unit: %s\n", "1 epoch");
for(int x4148=0; x4148 < 30; x4148++) {
double x4149 = x446[x4148];
fprintf((FILE *)x4146, "%lf\n", x4149);

}
double x4143 = x448 - x1;
double x4144 = x4142 - x448;
double x4145 = x4144 / 30.0;
fprintf((FILE *)x4146, "run time: %lf %lf\n", x4143, x4145);
fclose((FILE*)x4146);
}
/*****************************************
  End of C Generated Code                  
*******************************************/

